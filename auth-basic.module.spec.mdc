# 🧪 Auth Basic Module Specification - Tarot Web Application

**Module Scope:** Authentication & Authorization  
**Framework:** Next.js 15.4.4 + TypeScript + Supabase  
**Specification Version:** 1.0  
**Last Updated:** $(date)

---

## 📋 Module Overview

Bu specification, Tarot Web uygulamasının authentication ve authorization modülü için kabul kriterleri ve smoke test senaryolarını tanımlar.

**Kapsam:**
- Kullanıcı girişi/çıkışı
- Kayıt olma
- Şifre sıfırlama
- Email doğrulama
- Session yönetimi
- Role-based access control

---

## ✅ Acceptance Criteria

### 1. 🔐 Authentication Flow

#### 1.1 Valid Login
- [ ] **Kriter:** Geçerli kimlik bilgileri ile giriş yapıldığında kullanıcı `/dashboard` sayfasına yönlendirilir
- [ ] **Test:** `test('valid login redirects to dashboard')`
- [ ] **Veri:** `{ email: 'test@example.com', password: 'password123' }`
- [ ] **Beklenen:** HTTP 302 redirect to `/dashboard`

#### 1.2 Invalid Credentials
- [ ] **Kriter:** Geçersiz kimlik bilgileri ile giriş yapıldığında form error gösterilir
- [ ] **Test:** `test('invalid credentials show form error')`
- [ ] **Veri:** `{ email: 'test@example.com', password: 'wrongpassword' }`
- [ ] **Beklenen:** Form error message displayed

#### 1.3 Email Not Confirmed
- [ ] **Kriter:** Email doğrulanmamış kullanıcı giriş yapmaya çalıştığında uygun mesaj gösterilir
- [ ] **Test:** `test('unconfirmed email shows appropriate message')`
- [ ] **Veri:** `{ email: 'unconfirmed@example.com', password: 'password123' }`
- [ ] **Beklenen:** "Email doğrulanmamış" mesajı

#### 1.4 Empty Fields
- [ ] **Kriter:** Boş alanlar ile form gönderildiğinde validation error gösterilir
- [ ] **Test:** `test('empty fields show validation errors')`
- [ ] **Veri:** `{ email: '', password: '' }`
- [ ] **Beklenen:** Field validation errors

---

### 2. 📝 Registration Flow

#### 2.1 Valid Signup
- [ ] **Kriter:** Geçerli bilgiler ile kayıt olunduğunda email confirmation notice gösterilir
- [ ] **Test:** `test('valid signup triggers email confirmation')`
- [ ] **Veri:** `{ email: 'new@example.com', password: 'password123', confirmPassword: 'password123' }`
- [ ] **Beklenen:** "Email confirmation sent" notice

#### 2.2 Password Mismatch
- [ ] **Kriter:** Şifre ve şifre tekrarı eşleşmediğinde validation error gösterilir
- [ ] **Test:** `test('password mismatch shows validation error')`
- [ ] **Veri:** `{ email: 'test@example.com', password: 'password123', confirmPassword: 'different123' }`
- [ ] **Beklenen:** Password mismatch error

#### 2.3 Existing Email
- [ ] **Kriter:** Mevcut email ile kayıt olmaya çalışıldığında uygun mesaj gösterilir
- [ ] **Test:** `test('existing email shows appropriate message')`
- [ ] **Veri:** `{ email: 'existing@example.com', password: 'password123', confirmPassword: 'password123' }`
- [ ] **Beklenen:** "Email already exists" message

#### 2.4 Weak Password
- [ ] **Kriter:** Zayıf şifre ile kayıt olmaya çalışıldığında validation error gösterilir
- [ ] **Test:** `test('weak password shows validation error')`
- [ ] **Veri:** `{ email: 'test@example.com', password: '123', confirmPassword: '123' }`
- [ ] **Beklenen:** Password strength error

---

### 3. 🔒 Authorization Flow

#### 3.1 Protected Route Access
- [ ] **Kriter:** Giriş yapmamış kullanıcı `/dashboard` sayfasına erişmeye çalıştığında `/sign-in` sayfasına yönlendirilir
- [ ] **Test:** `test('unauthenticated user redirected to sign-in')`
- [ ] **Veri:** No session
- [ ] **Beklenen:** HTTP 302 redirect to `/sign-in`

#### 3.2 Admin Route Access
- [ ] **Kriter:** Admin olmayan kullanıcı admin sayfalarına erişmeye çalıştığında `/dashboard` sayfasına yönlendirilir
- [ ] **Test:** `test('non-admin user redirected from admin routes')`
- [ ] **Veri:** User with role 'user'
- [ ] **Beklenen:** HTTP 302 redirect to `/dashboard`

#### 3.3 Valid Admin Access
- [ ] **Kriter:** Admin kullanıcı admin sayfalarına erişebilir
- [ ] **Test:** `test('admin user can access admin routes')`
- [ ] **Veri:** User with role 'admin'
- [ ] **Beklenen:** HTTP 200 OK

---

### 4. 🔄 Session Management

#### 4.1 Session Persistence
- [ ] **Kriter:** Kullanıcı giriş yaptıktan sonra sayfa yenilendiğinde session korunur
- [ ] **Test:** `test('session persists on page refresh')`
- [ ] **Veri:** Valid session
- [ ] **Beklenen:** User remains logged in

#### 4.2 Session Expiry
- [ ] **Kriter:** Session süresi dolduğunda kullanıcı otomatik olarak çıkış yapar
- [ ] **Test:** `test('session expiry logs out user')`
- [ ] **Veri:** Expired session
- [ ] **Beklenen:** User redirected to sign-in

#### 4.3 Logout
- [ ] **Kriter:** Kullanıcı çıkış yaptığında session temizlenir ve `/sign-in` sayfasına yönlendirilir
- [ ] **Test:** `test('logout clears session and redirects')`
- [ ] **Veri:** Valid session
- [ ] **Beklenen:** Session cleared, redirect to `/sign-in`

---

### 5. 🔐 Security Requirements

#### 5.1 Service Role Protection
- [ ] **Kriter:** Client-side kodda service_role kullanılmaz
- [ ] **Test:** `test('no service role on client side')`
- [ ] **Veri:** Client-side code scan
- [ ] **Beklenen:** No service_role references

#### 5.2 RLS Enforcement
- [ ] **Kriter:** Tüm database tablolarında RLS aktif
- [ ] **Test:** `test('RLS enabled on all tables')`
- [ ] **Veri:** Database schema
- [ ] **Beklenen:** RLS enabled on all tables

#### 5.3 Same-Origin Redirects
- [ ] **Kriter:** Redirect URL'leri sadece same-origin olabilir
- [ ] **Test:** `test('redirect URLs are same-origin only')`
- [ ] **Veri:** Redirect URL validation
- [ ] **Beklenen:** Only same-origin redirects allowed

#### 5.4 Security Headers
- [ ] **Kriter:** Tüm sayfalarda güvenlik header'ları set edilir
- [ ] **Test:** `test('security headers are set')`
- [ ] **Veri:** HTTP response headers
- [ ] **Beklenen:** X-Frame-Options, CSP, etc. headers present

---

### 6. 🌐 Internationalization

#### 6.1 Turkish (tr) Support
- [ ] **Kriter:** Türkçe dil desteği tam olarak çalışır
- [ ] **Test:** `test('Turkish language support works')`
- [ ] **Veri:** Locale: 'tr'
- [ ] **Beklenen:** All text in Turkish

#### 6.2 English (en) Support
- [ ] **Kriter:** İngilizce dil desteği tam olarak çalışır
- [ ] **Test:** `test('English language support works')`
- [ ] **Veri:** Locale: 'en'
- [ ] **Beklenen:** All text in English

#### 6.3 Serbian (sr) Support
- [ ] **Kriter:** Sırpça dil desteği tam olarak çalışır
- [ ] **Test:** `test('Serbian language support works')`
- [ ] **Veri:** Locale: 'sr'
- [ ] **Beklenen:** All text in Serbian (Latin script)

#### 6.4 Missing Keys Handling
- [ ] **Kriter:** Eksik i18n anahtarları için placeholder gösterilir
- [ ] **Test:** `test('missing i18n keys show placeholders')`
- [ ] **Veri:** Missing translation key
- [ ] **Beklenen:** Placeholder text displayed

---

### 7. 📱 Form Validation

#### 7.1 Email Validation
- [ ] **Kriter:** Geçersiz email formatı validation error gösterir
- [ ] **Test:** `test('invalid email format shows validation error')`
- [ ] **Veri:** `{ email: 'invalid-email' }`
- [ ] **Beklenen:** Email validation error

#### 7.2 Password Strength
- [ ] **Kriter:** Zayıf şifre validation error gösterir
- [ ] **Test:** `test('weak password shows validation error')`
- [ ] **Veri:** `{ password: '123' }`
- [ ] **Beklenen:** Password strength error

#### 7.3 Required Fields
- [ ] **Kriter:** Zorunlu alanlar boş bırakıldığında validation error gösterir
- [ ] **Test:** `test('required fields show validation errors')`
- [ ] **Veri:** Empty required fields
- [ ] **Beklenen:** Required field validation errors

#### 7.4 Real-time Validation
- [ ] **Kriter:** Form alanları gerçek zamanlı olarak validate edilir
- [ ] **Test:** `test('real-time validation works')`
- [ ] **Veri:** User typing in form fields
- [ ] **Beklenen:** Validation errors appear/disappear as user types

---

### 8. 🚀 Performance Requirements

#### 8.1 Page Load Time
- [ ] **Kriter:** Auth sayfaları 1 saniye içinde yüklenir
- [ ] **Test:** `test('auth pages load within 1 second')`
- [ ] **Veri:** Page load time measurement
- [ ] **Beklenen:** Load time < 1s

#### 8.2 Bundle Size
- [ ] **Kriter:** Auth modülü 50KB'dan küçüktür
- [ ] **Test:** `test('auth module bundle size is under 50KB')`
- [ ] **Veri:** Bundle analysis
- [ ] **Beklenen:** Bundle size < 50KB

#### 8.3 Memory Usage
- [ ] **Kriter:** Auth hook'ları memory leak yapmaz
- [ ] **Test:** `test('auth hooks do not cause memory leaks')`
- [ ] **Veri:** Memory usage monitoring
- [ ] **Beklenen:** No memory leaks

---

## 🧪 Smoke Test Scenarios

### 1. 🔐 Authentication Smoke Tests

#### 1.1 Login Flow
```typescript
describe('Login Flow Smoke Tests', () => {
  test('GET /sign-in returns 200', async () => {
    const response = await fetch('/sign-in');
    expect(response.status).toBe(200);
  });
  
  test('valid login redirects to dashboard', async () => {
    const response = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'test@example.com',
        password: 'password123'
      })
    });
    
    expect(response.status).toBe(302);
    expect(response.headers.get('location')).toBe('/dashboard');
  });
  
  test('invalid credentials return 401', async () => {
    const response = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'test@example.com',
        password: 'wrongpassword'
      })
    });
    
    expect(response.status).toBe(401);
  });
});
```

#### 1.2 Registration Flow
```typescript
describe('Registration Flow Smoke Tests', () => {
  test('GET /sign-up returns 200', async () => {
    const response = await fetch('/sign-up');
    expect(response.status).toBe(200);
  });
  
  test('valid signup returns 201', async () => {
    const response = await fetch('/api/auth/signup', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'new@example.com',
        password: 'password123',
        confirmPassword: 'password123'
      })
    });
    
    expect(response.status).toBe(201);
  });
  
  test('duplicate email returns 409', async () => {
    const response = await fetch('/api/auth/signup', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'existing@example.com',
        password: 'password123',
        confirmPassword: 'password123'
      })
    });
    
    expect(response.status).toBe(409);
  });
});
```

### 2. 🔒 Authorization Smoke Tests

#### 2.1 Protected Routes
```typescript
describe('Protected Routes Smoke Tests', () => {
  test('unauthenticated /dashboard redirects to /sign-in', async () => {
    const response = await fetch('/dashboard', {
      redirect: 'manual'
    });
    
    expect(response.status).toBe(302);
    expect(response.headers.get('location')).toBe('/sign-in');
  });
  
  test('authenticated /dashboard returns 200', async () => {
    // First login
    const loginResponse = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'test@example.com',
        password: 'password123'
      })
    });
    
    const cookies = loginResponse.headers.get('set-cookie');
    
    // Then access dashboard
    const dashboardResponse = await fetch('/dashboard', {
      headers: { 'Cookie': cookies }
    });
    
    expect(dashboardResponse.status).toBe(200);
  });
});
```

#### 2.2 Admin Routes
```typescript
describe('Admin Routes Smoke Tests', () => {
  test('non-admin user redirected from /admin', async () => {
    // Login as regular user
    const loginResponse = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'user@example.com',
        password: 'password123'
      })
    });
    
    const cookies = loginResponse.headers.get('set-cookie');
    
    // Try to access admin route
    const adminResponse = await fetch('/admin', {
      headers: { 'Cookie': cookies },
      redirect: 'manual'
    });
    
    expect(adminResponse.status).toBe(302);
    expect(adminResponse.headers.get('location')).toBe('/dashboard');
  });
  
  test('admin user can access /admin', async () => {
    // Login as admin user
    const loginResponse = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'admin@example.com',
        password: 'password123'
      })
    });
    
    const cookies = loginResponse.headers.get('set-cookie');
    
    // Access admin route
    const adminResponse = await fetch('/admin', {
      headers: { 'Cookie': cookies }
    });
    
    expect(adminResponse.status).toBe(200);
  });
});
```

### 3. 🌐 Localized Routes Smoke Tests

#### 3.1 Locale Routing
```typescript
describe('Localized Routes Smoke Tests', () => {
  test('GET /tr/sign-in returns 200', async () => {
    const response = await fetch('/tr/sign-in');
    expect(response.status).toBe(200);
  });
  
  test('GET /en/sign-in returns 200', async () => {
    const response = await fetch('/en/sign-in');
    expect(response.status).toBe(200);
  });
  
  test('GET /sr/sign-in returns 200', async () => {
    const response = await fetch('/sr/sign-in');
    expect(response.status).toBe(200);
  });
  
  test('invalid locale redirects to default', async () => {
    const response = await fetch('/invalid/sign-in', {
      redirect: 'manual'
    });
    
    expect(response.status).toBe(302);
    expect(response.headers.get('location')).toBe('/tr/sign-in');
  });
});
```

### 4. 🔄 Session Management Smoke Tests

#### 4.1 Session Persistence
```typescript
describe('Session Management Smoke Tests', () => {
  test('session persists across requests', async () => {
    // Login
    const loginResponse = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'test@example.com',
        password: 'password123'
      })
    });
    
    const cookies = loginResponse.headers.get('set-cookie');
    
    // Make multiple requests with same session
    const response1 = await fetch('/dashboard', {
      headers: { 'Cookie': cookies }
    });
    
    const response2 = await fetch('/dashboard', {
      headers: { 'Cookie': cookies }
    });
    
    expect(response1.status).toBe(200);
    expect(response2.status).toBe(200);
  });
  
  test('logout clears session', async () => {
    // Login
    const loginResponse = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'test@example.com',
        password: 'password123'
      })
    });
    
    const cookies = loginResponse.headers.get('set-cookie');
    
    // Logout
    const logoutResponse = await fetch('/api/auth/logout', {
      method: 'POST',
      headers: { 'Cookie': cookies }
    });
    
    expect(logoutResponse.status).toBe(200);
    
    // Try to access protected route
    const protectedResponse = await fetch('/dashboard', {
      headers: { 'Cookie': cookies },
      redirect: 'manual'
    });
    
    expect(protectedResponse.status).toBe(302);
    expect(protectedResponse.headers.get('location')).toBe('/sign-in');
  });
});
```

---

## 📊 Test Coverage Requirements

### 1. Unit Tests
- [ ] **Target Coverage:** 80%+
- [ ] **Focus Areas:**
  - Auth schemas (login, signup, reset-password, change-password)
  - Auth helpers (isAdmin, isAuthenticated)
  - Form validation
  - Error handling

### 2. Integration Tests
- [ ] **Target Coverage:** 70%+
- [ ] **Focus Areas:**
  - Supabase auth integration
  - Middleware functionality
  - Route protection
  - Session management

### 3. E2E Tests
- [ ] **Target Coverage:** 60%+
- [ ] **Focus Areas:**
  - Complete auth flows
  - User journeys
  - Cross-browser compatibility
  - Mobile responsiveness

---

## 🚀 Performance Benchmarks

### 1. Load Time
- [ ] **Auth pages:** < 1 second
- [ ] **API responses:** < 500ms
- [ ] **Form validation:** < 100ms

### 2. Bundle Size
- [ ] **Auth module:** < 50KB
- [ ] **Dependencies:** < 100KB
- [ ] **Total auth bundle:** < 150KB

### 3. Memory Usage
- [ ] **No memory leaks**
- [ ] **Stable memory usage**
- [ ] **Proper cleanup on unmount**

---

## 🔍 Security Benchmarks

### 1. Authentication Security
- [ ] **No service_role on client**
- [ ] **RLS enabled on all tables**
- [ ] **Secure session management**
- [ ] **Proper error handling**

### 2. Authorization Security
- [ ] **Route protection working**
- [ ] **Admin access control**
- [ ] **Session validation**
- [ ] **CSRF protection**

### 3. Data Security
- [ ] **Input validation**
- [ ] **Output sanitization**
- [ ] **Secure headers**
- [ ] **No sensitive data exposure**

---

## 📋 Deployment Checklist

### Pre-Deployment
- [ ] All acceptance criteria met
- [ ] All smoke tests passing
- [ ] Test coverage requirements met
- [ ] Performance benchmarks met
- [ ] Security benchmarks met
- [ ] Code review completed
- [ ] Security review completed

### Post-Deployment
- [ ] Monitoring active
- [ ] Error tracking active
- [ ] Performance metrics good
- [ ] Security metrics good
- [ ] User feedback positive
- [ ] No critical issues reported

---

## 🚨 Failure Scenarios

### 1. Critical Failures
- **Authentication bypass:** Immediate rollback
- **Authorization failure:** Immediate rollback
- **Security vulnerability:** Immediate rollback
- **Data breach:** Immediate rollback

### 2. Performance Failures
- **Load time > 2s:** Warning + optimization
- **Bundle size > 100KB:** Warning + optimization
- **Memory leak:** Warning + fix

### 3. Quality Failures
- **Test coverage < 70%:** Warning + tests
- **TypeScript errors:** Build failure
- **Lint errors:** Warning + fix

---

## 📞 Support & Escalation

### 1. Development Issues
- **Email:** dev@tarot-app.com
- **Slack:** #auth-module-dev
- **Phone:** +90 555 123 4567

### 2. Security Issues
- **Email:** security@tarot-app.com
- **Slack:** #security-alerts
- **Phone:** +90 555 123 4568

### 3. Performance Issues
- **Email:** performance@tarot-app.com
- **Slack:** #performance-alerts
- **Phone:** +90 555 123 4569

---

**Bu specification auth-basic modülü için zorunludur ve tüm kriterler karşılanmalıdır.**