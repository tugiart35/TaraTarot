/*
info:
Baƒülantƒ±lƒ± dosyalar:
- react: Temel React fonksiyonlarƒ± i√ßin (gerekli)
- @/hooks/useAuth: Kullanƒ±cƒ± oturum ve yetki kontrol√º i√ßin (gerekli) - YENƒ∞ EKLENDƒ∞
- @/hooks/useReadingCredits: Okuma tipi i√ßin kredi kontrol√º ve y√∂netimi (gerekli)
- @/constants/reading-credits: Okuma tipine g√∂re kredi miktarlarƒ± (gerekli)
- components/specific/tarot/3cardtarot/ThreeReadingTypeSelector.tsx: 3 kart a√ßƒ±lƒ±mƒ± i√ßin √∂zelle≈ütirilmi≈ü okuma tipi se√ßici (gerekli, BaseReadingTypeSelector'ƒ± √∂zelle≈ütirerek kullanƒ±r)
- components/specific/tarot/hermit/ReadingTypeSelector.tsx: Hermit a√ßƒ±lƒ±mƒ± i√ßin √∂zelle≈ütirilmi≈ü okuma tipi se√ßici (gerekli, BaseReadingTypeSelector'ƒ± √∂zelle≈ütirerek kullanƒ±r)
- components/specific/tarot/Love-Spread/LoveReadingTypeSelector.tsx: A≈ük a√ßƒ±lƒ±mƒ± i√ßin √∂zelle≈ütirilmi≈ü okuma tipi se√ßici (gerekli, BaseReadingTypeSelector'ƒ± √∂zelle≈ütirerek kullanƒ±r)
- components/specific/tarot/CareerTarot/CareerReadingTypeSelector.tsx: Kariyer a√ßƒ±lƒ±mƒ± i√ßin √∂zelle≈ütirilmi≈ü okuma tipi se√ßici (gerekli, BaseReadingTypeSelector'ƒ± √∂zelle≈ütirerek kullanƒ±r)

Dosyanƒ±n amacƒ±:
- T√ºm tarot a√ßƒ±lƒ±mlarƒ± i√ßin ortak, mobil uyumlu, temalƒ± ve yeniden kullanƒ±labilir bir okuma tipi (basit/detaylƒ±/yazƒ±lƒ±) se√ßici bile≈üeni sunmak. Kullanƒ±cƒ± giri≈ü kontrol√º, tema ve metin √∂zelle≈ütirmesi ile farklƒ± a√ßƒ±lƒ±mlarda tekrar eden kodu ortadan kaldƒ±rƒ±r.

Backend baƒülantƒ±sƒ±:
- Bu dosyada doƒürudan backend kullanƒ±mƒ± yoktur. useAuth hook'u √ºzerinden kullanƒ±cƒ± giri≈ü durumu kontrol edilir. Kredi kontrol√º kaldƒ±rƒ±lmƒ±≈ütƒ±r.

Geli≈ütirme ve √∂neriler:
- Tema sistemi sade ve geni≈ületilebilir, yeni tema eklemek kolay.
- Kullanƒ±cƒ± giri≈ü kontrol√º ve mesajlar kullanƒ±cƒ±ya net ≈üekilde g√∂steriliyor.
- Butonlar eri≈üilebilir ve mobil √∂ncelikli tasarlanmƒ±≈ü.
- Okuma tipleri, ikonlar ve mesajlar √ºst bile≈üenden √∂zelle≈ütirilebiliyor.
- ARIA ve eri≈üilebilirlik i√ßin ek √∂zellikler (√∂r. role, aria-label) eklenebilir.
- Kullanƒ±cƒ± giri≈ü yapmamƒ±≈üsa detailed/written butonlarƒ± devre dƒ±≈üƒ± oluyor, UX a√ßƒ±sƒ±ndan doƒüru.

Hatalar / Geli≈ütirmeye A√ßƒ±k Noktalar:
- Eri≈üilebilirlik i√ßin ek ARIA √∂zellikleri ve klavye ile eri≈üim desteƒüi eklenmeli.
- Butonlar i√ßin loading durumu veya async feedback eklenebilir.
- Kodda gereksiz tekrar veya karma≈üƒ±k yapƒ± yok, fonksiyonlar sade ve amacƒ±na uygun.

Kodun okunabilirliƒüi, optimizasyonu, yeniden kullanƒ±labilirliƒüi ve g√ºvenliƒüi:
- Okunabilirlik: Kod bloklarƒ± ve prop isimleri a√ßƒ±k, fonksiyonel bile≈üen yapƒ±sƒ± sade.
- Optimizasyon: Tema ve mesajlar nesne olarak tanƒ±mlanmƒ±≈ü, tekrar yok.
- Yeniden Kullanƒ±labilirlik: Farklƒ± a√ßƒ±lƒ±m t√ºrleri ve okuma tipleri i√ßin kolayca kullanƒ±labilir, √ºst bile≈üenler tema ve metin ile √∂zelle≈ütirebilir.
- G√ºvenlik: Sadece g√∂rsel aray√ºz, dƒ±≈üarƒ±dan gelen fonksiyonlar ve veriler √ºst bile≈üenlerden gelmeli. useAuth hook'u g√ºvenli ≈üekilde kullanƒ±cƒ± durumunu kontrol eder.

Gereklilik ve Kullanƒ±m Durumu:
- BaseReadingTypeSelector: Gerekli, t√ºm tarot a√ßƒ±lƒ±mlarƒ±nda ortak okuma tipi se√ßici altyapƒ±sƒ± olarak kullanƒ±lmalƒ±.
- Tema ve mesaj sistemleri: Gerekli, √∂zelle≈ütirilebilirlik ve tekrarƒ±n √∂nlenmesi i√ßin √∂nemli.
- Kullanƒ±cƒ± giri≈ü kontrol√º: Gerekli, detailed/written okumalar i√ßin g√ºvenlik saƒülar.
- Silinebilir veya gereksiz kod yoktur, sade ve amacƒ±na uygun bir altyapƒ± bile≈üenidir.

Yapƒ±lan deƒüi≈üiklikler:
- useAuth hook'u eklendi
- Detailed ve written butonlarƒ± kullanƒ±cƒ± giri≈ü durumuna g√∂re aktif/pasif yapƒ±ldƒ±
- Kullanƒ±cƒ± giri≈ü yapmamƒ±≈üsa uyarƒ± mesajƒ± eklendi
- Buton tooltip'leri giri≈ü durumuna g√∂re g√ºncellendi
*/

'use client';

import React from 'react';
import { CreditStatus } from '@/lib/constants/reading-credits';
import { useTranslations } from '@/hooks/useTranslations';
import { useAuth } from '@/hooks/auth/useAuth';
import { useReadingCredits } from '@/hooks/useReadingCredits';
import { getTheme, type Theme } from '@/lib/theme/theme-config';
// import CreditInfoModal from './CreditInfoModal'; // Archived

interface BaseReadingTypeSelectorProps {
  selectedType: string | null;
  onTypeSelect: (_type: string) => void;
  onCreditInfoClick?: () => void; // Kredi yetersizken tƒ±klama eylemi
  onReadingTypeSelected?: () => void; // Okuma tipi se√ßildiƒüinde √ßaƒürƒ±lacak callback
  readingTypes: {
    SIMPLE: string;
    DETAILED: string;
    WRITTEN: string;
  };
  creditStatus?: CreditStatus; // Prop olarak dƒ±≈üarƒ±dan al
  theme?: Theme;
  disabled?: boolean;
  className?: string;
  simpleText?: string;
  detailedText?: string;
  writtenText?: string;
  simpleIcon?: string;
  detailedIcon?: string;
  writtenIcon?: string;
  noSelectionMessage?: string;
  simpleSelectedMessage?: string;
  detailedSelectedMessage?: string;
  writtenSelectedMessage?: string;
  adminRequiredMessage?: string;
  writtenRequiredMessage?: string;
  readingType: 'LOVE_SPREAD' | 'LOVE_SPREAD_DETAILED' | 'LOVE_SPREAD_WRITTEN' | 'CAREER_SPREAD_DETAILED' | 'CAREER_SPREAD_WRITTEN' | 'PROBLEM_SOLVING_DETAILED' | 'PROBLEM_SOLVING_WRITTEN' | 'SITUATION_ANALYSIS_DETAILED' | 'SITUATION_ANALYSIS_WRITTEN' | 'RELATIONSHIP_ANALYSIS_DETAILED' | 'RELATIONSHIP_ANALYSIS_WRITTEN' | 'RELATIONSHIP_PROBLEMS_DETAILED' | 'RELATIONSHIP_PROBLEMS_WRITTEN' | 'MARRIAGE_DETAILED' | 'MARRIAGE_WRITTEN' | 'NEW_LOVER_DETAILED' | 'NEW_LOVER_WRITTEN' | 'MONEY_SPREAD' | 'MONEY_SPREAD_DETAILED' | 'MONEY_SPREAD_WRITTEN';
}

export default function BaseReadingTypeSelector({
  selectedType,
  onTypeSelect,
  onCreditInfoClick: _onCreditInfoClick,
  onReadingTypeSelected,
  readingTypes,
  creditStatus: _creditStatus, // Prop olarak kullan
  theme = 'default',
  disabled = false,
  className = '',
  simpleText,
  detailedText,
  writtenText,
  simpleIcon = '‚ú®',
  detailedIcon = 'üëë',
  writtenIcon = 'üìù',
  noSelectionMessage,
  simpleSelectedMessage,
  detailedSelectedMessage,
  writtenSelectedMessage,
  adminRequiredMessage: _adminRequiredMessage,
  writtenRequiredMessage: _writtenRequiredMessage,
  readingType,
}: BaseReadingTypeSelectorProps) {
  const { t } = useTranslations();
  const { isAuthenticated } = useAuth(); // Kullanƒ±cƒ± giri≈ü durumunu kontrol et

  // Kredi kontrol√º - sesli ve yazƒ±lƒ± okumalar i√ßin
  const detailedReadingType = readingType === 'PROBLEM_SOLVING_DETAILED' 
    ? 'PROBLEM_SOLVING_DETAILED' 
    : readingType === 'CAREER_SPREAD_DETAILED'
    ? 'CAREER_SPREAD_DETAILED'
    : readingType === 'SITUATION_ANALYSIS_DETAILED'
    ? 'SITUATION_ANALYSIS_DETAILED'
    : readingType === 'RELATIONSHIP_ANALYSIS_DETAILED'
    ? 'RELATIONSHIP_ANALYSIS_DETAILED'
    : readingType === 'RELATIONSHIP_PROBLEMS_DETAILED'
    ? 'RELATIONSHIP_PROBLEMS_DETAILED'
    : readingType === 'MARRIAGE_DETAILED'
    ? 'MARRIAGE_DETAILED'
    : readingType === 'NEW_LOVER_DETAILED'
    ? 'NEW_LOVER_DETAILED'
    : readingType === 'MONEY_SPREAD' || readingType === 'MONEY_SPREAD_DETAILED'
    ? 'MONEY_SPREAD_DETAILED'
    : 'LOVE_SPREAD_DETAILED';
    
  const writtenReadingType = readingType === 'PROBLEM_SOLVING_DETAILED' 
    ? 'PROBLEM_SOLVING_WRITTEN' 
    : readingType === 'CAREER_SPREAD_DETAILED'
    ? 'CAREER_SPREAD_WRITTEN'
    : readingType === 'SITUATION_ANALYSIS_DETAILED'
    ? 'SITUATION_ANALYSIS_WRITTEN'
    : readingType === 'RELATIONSHIP_ANALYSIS_DETAILED'
    ? 'RELATIONSHIP_ANALYSIS_WRITTEN'
    : readingType === 'RELATIONSHIP_PROBLEMS_DETAILED'
    ? 'RELATIONSHIP_PROBLEMS_WRITTEN'
    : readingType === 'MARRIAGE_DETAILED'
    ? 'MARRIAGE_WRITTEN'
    : readingType === 'NEW_LOVER_DETAILED'
    ? 'NEW_LOVER_WRITTEN'
    : readingType === 'MONEY_SPREAD' || readingType === 'MONEY_SPREAD_WRITTEN'
    ? 'MONEY_SPREAD_WRITTEN'
    : 'LOVE_SPREAD_WRITTEN';


  const detailedCredits = useReadingCredits(detailedReadingType);
  const writtenCredits = useReadingCredits(writtenReadingType);

  // Modal state'leri
  // const [showCreditInfoModal, setShowCreditInfoModal] = useState(false); // Archived with CreditInfoModal
  // const [pendingReadingType, setPendingReadingType] = useState<string | null>(null); // Archived with CreditInfoModal

  // Varsayƒ±lan deƒüerleri i18n'den al
  const defaultSimpleText = simpleText || t('reading.types.simple');
  const defaultDetailedText = detailedText || t('reading.types.detailed');
  const defaultWrittenText = writtenText || t('reading.types.written');
  const defaultNoSelectionMessage =
    noSelectionMessage || t('reading.messages.noSelection');
  const defaultSimpleSelectedMessage =
    simpleSelectedMessage || t('reading.messages.simpleSelected');
  const defaultDetailedSelectedMessage =
    detailedSelectedMessage || t('reading.messages.detailedSelected');
  const defaultWrittenSelectedMessage =
    writtenSelectedMessage || t('reading.messages.writtenSelected');
  // ReadingInfoModal i√ßin state'ler - ≈üimdilik kullanƒ±lmƒ±yor
  // const [showReadingInfoModal, setShowReadingInfoModal] = useState(false);
  // const [pendingReadingType, setPendingReadingType] = useState<string | null>(null);

  // Kredi kontrol√º kaldƒ±rƒ±ldƒ± - basit yazƒ±lƒ± sesli butonlar i√ßin

  // Modal onay fonksiyonu
  // const handleModalConfirm = () => { // Archived with CreditInfoModal
  //   setShowCreditInfoModal(false);
  //   if (pendingReadingType) {
  //     onTypeSelect(pendingReadingType);
  //     setPendingReadingType(null);
  //   }
  // };

  // // Modal iptal fonksiyonu
  // const handleModalCancel = () => { // Archived with CreditInfoModal
  //   setShowCreditInfoModal(false);
  //   setPendingReadingType(null);
  // };

  // Sesli/yazƒ±lƒ± okuma se√ßildiƒüinde √ßaƒürƒ±lacak fonksiyon
  const handleReadingTypeClick = (type: string) => {
    if (type === readingTypes.DETAILED || type === readingTypes.WRITTEN) {
      // Kullanƒ±cƒ± giri≈ü yapmamƒ±≈üsa butonlarƒ± devre dƒ±≈üƒ± bƒ±rak
      if (!isAuthenticated) {
        return;
      }

      // Kredi kontrol√º - sesli ve yazƒ±lƒ± okumalar i√ßin
      if (
        type === readingTypes.DETAILED &&
        !detailedCredits.creditStatus.hasEnoughCredits
      ) {
        // Kredi yetersiz - kredi bilgi modalƒ±nƒ± a√ß
        if (_onCreditInfoClick) {
          _onCreditInfoClick();
        }
        return;
      }

      if (
        type === readingTypes.WRITTEN &&
        !writtenCredits.creditStatus.hasEnoughCredits
      ) {
        // Kredi yetersiz - kredi bilgi modalƒ±nƒ± a√ß
        if (_onCreditInfoClick) {
          _onCreditInfoClick();
        }
        return;
      }

      // Kredi yeterli - okuma t√ºr√ºn√º se√ß ve akƒ±≈üa devam et
      onTypeSelect(type);
      // Okuma tipi se√ßildiƒüinde parent bile≈üene bildir
      if (onReadingTypeSelected) {
        onReadingTypeSelected();
      }
    } else {
      // Basit okuma i√ßin direkt se√ß
      onTypeSelect(type);
      // Okuma tipi se√ßildiƒüinde parent bile≈üene bildir
      if (onReadingTypeSelected) {
        onReadingTypeSelected();
      }
    }
  };

  // ReadingInfoModal fonksiyonlarƒ± kaldƒ±rƒ±ldƒ± - basit yazƒ±lƒ± sesli butonlar i√ßin

  const currentTheme = getTheme(theme);

  return (
    <div className={`flex flex-col items-center justify-center ${className}`}>
      <div
        className={`flex flex-wrap justify-center gap-2 sm:gap-3 sm:space-x-0 ${currentTheme.container} border rounded-xl px-2 sm:px-4 py-2 shadow-sm`}
      >
        {/* Basit Okuma - Her zaman a√ßƒ±k */}
        <button
          onClick={() => {
            onTypeSelect(readingTypes.SIMPLE);
            // Okuma tipi se√ßildiƒüinde parent bile≈üene bildir
            if (onReadingTypeSelected) {
              onReadingTypeSelected();
            }
          }}
          disabled={disabled}
          className={`px-2 sm:px-4 py-2 rounded-lg font-semibold text-xs sm:text-sm transition-all duration-150 focus:outline-none focus:ring-2 ${currentTheme.simpleButton.focus} disabled:opacity-50 disabled:cursor-not-allowed
            ${
              selectedType === readingTypes.SIMPLE
                ? currentTheme.simpleButton.selected
                : currentTheme.simpleButton.unselected
            }`}
        >
          <span className='flex items-center space-x-1'>
            <span className='text-sm sm:text-base'>{simpleIcon}</span>
            <span className='hidden sm:inline'>{defaultSimpleText}</span>
            <span className='sm:hidden'>{t('reading.types.simpleShort')}</span>
          </span>
        </button>

        {/* Sesli Okuma - Kullanƒ±cƒ± giri≈ü yapmƒ±≈üsa ve kredi yeterliyse aktif */}
        <button
          onClick={() => handleReadingTypeClick(readingTypes.DETAILED)}
          disabled={
            disabled ||
            !isAuthenticated ||
            !detailedCredits.creditStatus.hasEnoughCredits
          }
          className={`px-2 sm:px-4 py-2 rounded-lg font-semibold text-xs sm:text-sm transition-all duration-150 focus:outline-none focus:ring-2 ${currentTheme.detailedButton.focus} disabled:opacity-50 disabled:cursor-not-allowed
            ${
              selectedType === readingTypes.DETAILED
                ? currentTheme.detailedButton.selected
                : !isAuthenticated ||
                    !detailedCredits.creditStatus.hasEnoughCredits
                  ? currentTheme.detailedButton.disabled
                  : currentTheme.detailedButton.unselected
            }`}
          title={
            !isAuthenticated
              ? 'Giri≈ü yapƒ±n'
              : !detailedCredits.creditStatus.hasEnoughCredits
                ? `Yetersiz kredi (${detailedCredits.creditStatus.requiredCredits} kredi gerekli)`
                : `${defaultDetailedText} - ${t('reading.messages.detailedDescription')} (${detailedCredits.creditStatus.requiredCredits} kredi)`
          }
        >
          <span className='flex items-center space-x-1'>
            <span className='text-sm sm:text-base'>{detailedIcon}</span>
            <span className='hidden sm:inline'>{defaultDetailedText}</span>
            <span className='sm:hidden'>
              {t('reading.types.detailedShort')}
            </span>
            {isAuthenticated && (
              <span className='text-xs opacity-75 ml-1'>
                ({detailedCredits.creditStatus.requiredCredits})
              </span>
            )}
          </span>
        </button>

        {/* Yazƒ±lƒ± Okuma - Kullanƒ±cƒ± giri≈ü yapmƒ±≈üsa ve kredi yeterliyse aktif */}
        <button
          onClick={() => handleReadingTypeClick(readingTypes.WRITTEN)}
          disabled={
            disabled ||
            !isAuthenticated ||
            !writtenCredits.creditStatus.hasEnoughCredits
          }
          className={`px-2 sm:px-4 py-2 rounded-lg font-semibold text-xs sm:text-sm transition-all duration-150 focus:outline-none focus:ring-2 ${currentTheme.detailedButton.focus} disabled:opacity-50 disabled:cursor-not-allowed
            ${
              selectedType === readingTypes.WRITTEN
                ? currentTheme.detailedButton.selected
                : !isAuthenticated ||
                    !writtenCredits.creditStatus.hasEnoughCredits
                  ? currentTheme.detailedButton.disabled
                  : currentTheme.detailedButton.unselected
            }`}
          title={
            !isAuthenticated
              ? 'Giri≈ü yapƒ±n'
              : !writtenCredits.creditStatus.hasEnoughCredits
                ? `Yetersiz kredi (${writtenCredits.creditStatus.requiredCredits} kredi gerekli)`
                : `${defaultWrittenText} - ${t('reading.messages.writtenDescription')} (${writtenCredits.creditStatus.requiredCredits} kredi)`
          }
        >
          <span className='flex items-center space-x-1'>
            <span className='text-sm sm:text-base'>{writtenIcon}</span>
            <span className='hidden sm:inline'>{defaultWrittenText}</span>
            <span className='sm:hidden'>{t('reading.types.writtenShort')}</span>
            {isAuthenticated && (
              <span className='text-xs opacity-75 ml-1'>
                ({writtenCredits.creditStatus.requiredCredits})
              </span>
            )}
          </span>
        </button>
      </div>

      <div className='text-center mt-2'>
        {!selectedType && (
          <span className={`text-xs ${currentTheme.messages.noSelection}`}>
            {defaultNoSelectionMessage}
          </span>
        )}
        {selectedType === readingTypes.SIMPLE && (
          <span className={`text-xs ${currentTheme.messages.simple}`}>
            {simpleIcon} {defaultSimpleSelectedMessage}
          </span>
        )}
        {selectedType === readingTypes.DETAILED && (
          <span className={`text-xs ${currentTheme.messages.detailed}`}>
            {detailedIcon} {defaultDetailedSelectedMessage}
          </span>
        )}
        {selectedType === readingTypes.WRITTEN && (
          <span className={`text-xs ${currentTheme.messages.detailed}`}>
            {writtenIcon} {defaultWrittenSelectedMessage}
          </span>
        )}
        {!isAuthenticated && (
          <span className={`text-xs ${currentTheme.messages.adminRequired}`}>
            üîí Sesli ve yazƒ±lƒ± okumalar i√ßin giri≈ü yapƒ±n
          </span>
        )}
        {isAuthenticated &&
          (!detailedCredits.creditStatus.hasEnoughCredits ||
            !writtenCredits.creditStatus.hasEnoughCredits) && (
            <span className={`text-xs ${currentTheme.messages.adminRequired}`}>
              üí≥ Sesli okuma: {detailedCredits.creditStatus.requiredCredits}{' '}
              kredi | Yazƒ±lƒ± okuma:{' '}
              {writtenCredits.creditStatus.requiredCredits} kredi
            </span>
          )}
      </div>

      {/* CreditInfoModal - kredi bilgilendirmesi i√ßin - Archived */}
      {/* {showCreditInfoModal && pendingReadingType && (
        <CreditInfoModal
          isOpen={showCreditInfoModal}
          onClose={handleModalCancel}
          onConfirm={handleModalConfirm}
          readingType={
            pendingReadingType === readingTypes.DETAILED
              ? 'LOVE_SPREAD_DETAILED'
              : 'LOVE_SPREAD_WRITTEN'
          }
          theme={theme}
        />
      )} */}
    </div>
  );
}
