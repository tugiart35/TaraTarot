/*
info:
---
Dosya Amacı:
- Durum Analizi ve Para tarot açılımı ana bileşeni
- 7 kartlık özel düzen ile kariyer analizi
- Kullanıcı kart seçer, pozisyonları yönetir, yorum alır

Bağlı Dosyalar:
- situationAnalysis-config.ts (konfigürasyon)
- position-meanings-index.ts (pozisyon anlamları)
- messages/tr.json (çeviriler)

Düzeltilen Hatalar:
- Form modal'ında renk tutarsızlığı düzeltildi (pink -> green)
- Email gönderimi fonksiyonu eklendi

Eklenen Özellikler:
- Form validasyon fonksiyonları mevcut
- Bilgilendirme modal'ı mevcut
- DETAILED/WRITTEN form modal'ı mevcut
- Kredi onay modal'ı mevcut
- ESC tuşu ile modal kapatma mevcut
- Email gönderimi fonksiyonu eklendi
- Form kaydetme ve kredi onay akışı tamamlandı

Üretime Hazır mı?:
- Evet, tüm özellikler tamamlandı, LoveTarot.tsx ve ProblemSolvingTarot.tsx ile uyumlu
---

*/

'use client';

// useAuth kaldırıldı - login sistemi kaldırıldı
// TarotCard tipi @/types/tarot'a taşındı.
import { getSituationAnalysisMeaningByCardAndPosition } from '@/features/tarot/lib/situation-analysis/position-meanings-index';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useToast } from '@/hooks/useToast';
import { supabase } from '@/lib/supabase/client';
import {
  Toast,
  BaseCardGallery,
  BaseReadingTypeSelector,
  CardDetails,
  BaseCardRenderer,
} from '@/features/shared/ui';
import {
  BaseTarotModal,
  BaseTarotCanvas,
  BaseTarotInterpretation,
} from '@/features/tarot/shared/ui';
import { useTarotReadingFlow } from '@/features/tarot/shared/hooks';
import { createSituationAnalysisConfig } from '@/features/tarot/shared/config';
import { useTranslations } from '@/hooks/useTranslations';
import { useReadingCredits } from '@/hooks/useReadingCredits';
import { useAuth } from '@/hooks/auth/useAuth';
// Config artık useTarotReadingFlow içinde oluşturuluyor

// ============================================================================
// BÖLÜM 1: SABITLER VE KONFIGÜRASYONLAR
// ============================================================================

// Durum Analizi Açılımı pozisyon başlıkları ve açıklamaları
// Eski CAREER_POSITIONS_INFO ve CAREER_POSITIONS_LAYOUT tanımlarını tamamen kaldır.

// Kart sayısı artık config'den alınıyor

// Okuma tipleri
import {
  READING_TYPES,
  ReadingType,
  TarotCard,
  TarotReadingProps,
} from '@/types/tarot';

// AI ile ilgili prompt'lar ve fonksiyonlar kaldırıldı.

// ============================================================================
// BÖLÜM 2: REACT BİLEŞENİ
// ============================================================================

// Ana Durum Analizi Açılımı bileşeni
export default function SituationAnalysisReading({
  onComplete: _onComplete,
  onPositionChange: _onPositionChange,
  onReadingTypeSelected,
}: TarotReadingProps) {
  const router = useRouter();
  const { t } = useTranslations();
  const { user } = useAuth();

  // Kredi yönetimi
  const detailedCredits = useReadingCredits('SITUATION_ANALYSIS_DETAILED');
  const writtenCredits = useReadingCredits('SITUATION_ANALYSIS_WRITTEN');

  // useTarotReadingFlow hook'unu kullan
  const {
    selectedCards,
    usedCardIds,
    showCardDetails,
    cardStates,
    isReversed,
    deck,
    currentPosition,
    handleCardSelect,
    setShowCardDetails,
    toggleCardState,
    handleClearAll,
    shuffleDeck,
    interpretationRef,
    userQuestion,
    selectedReadingType,
    setSelectedReadingType,
    personalInfo,
    questions,
    formErrors,
    modalStates,
    setModalStates,
    updatePersonalInfo,
    updateQuestion,
    validateDetailedForm,
    setSaving,
    setSavingReading,
    setDetailedFormSaved,
    handleReadingTypeSelect,
    config,
  } = useTarotReadingFlow({
    config: createSituationAnalysisConfig(),
    onComplete: (_cards, _interpretation) => {
      // Durum Analizi açılımı tamamlandı
    },
    onPositionChange: _title => {
      // Pozisyon değişti
    },
  });

  // State'ler
  const { toast, showToast, hideToast } = useToast();
  const [startTime] = useState<number>(Date.now()); // Duration tracking için

  // Destructure modal states for backward compatibility
  const {
    isSaving,
    showCreditConfirm,
    detailedFormSaved,
    showInfoModal,
    isSavingReading,
    showSuccessModal,
  } = modalStates;

  // ESC tuşu ile modal kapatma
  useEffect(() => {
    const handleEscapeKey = (event: KeyboardEvent) => {
      if (
        event.key === 'Escape' &&
        (selectedReadingType === READING_TYPES.DETAILED ||
          selectedReadingType === READING_TYPES.WRITTEN) &&
        !detailedFormSaved
      ) {
        // Form kaydetmeden çıkış uyarısı
        if (
          personalInfo.name ||
          personalInfo.surname ||
          personalInfo.email ||
          questions.concern
        ) {
          const shouldClose = window.confirm(
            t('situationAnalysis.messages.formUnsavedWarning')
          );
          if (shouldClose) {
            setSelectedReadingType(null);
          }
        } else {
          setSelectedReadingType(null);
        }
      }
    };

    document.addEventListener('keydown', handleEscapeKey);
    return () => {
      document.removeEventListener('keydown', handleEscapeKey);
    };
  }, [
    selectedReadingType,
    detailedFormSaved,
    personalInfo,
    questions,
    setSelectedReadingType,
    t,
  ]);

  // Basit okuma için soru kaydetme fonksiyonu kaldırıldı - artık soru kaydet ekranı yok

  // Form validation and update functions are now handled by useTarotFormState hook
  const handleSaveDetailedFormClick = () => {
    if (!validateDetailedForm()) {
      return;
    }
    // Kredi kontrolü kaldırıldı - login sistemi kaldırıldı
    setModalStates(prev => ({ ...prev, showCreditConfirm: true }));
  };
  const saveDetailedForm = async () => {
    if (!user) {
      showToast(t('situationAnalysis.messages.loginRequired'), 'error');
      setModalStates(prev => ({
        ...prev,
        showCreditConfirm: false,
        isSaving: false,
      }));
      return;
    }

    setSaving(true);
    try {
      // Kredi ön kesinti kaldırıldı. Kredi yeterliliği UI seviyesinde kontrol ediliyor,
      // asıl kesinti RPC ile kaydetme sırasında yapılacak.
      setDetailedFormSaved(true);
      setModalStates(prev => ({ ...prev, showCreditConfirm: false }));
    } finally {
      setSaving(false);
    }
  };

  const saveReadingToSupabase = async (readingData: any) => {
    try {
      // Sadece giriş yapmış kullanıcılar için veri sakla
      if (!user?.id) {
        return {
          success: true,
          id: 'guest-session',
          userId: 'guest',
          message: 'Guest kullanıcı için veri saklanmadı',
        };
      }

      // Kredi düş + okuma kaydet (atomik) — RPC
      const costCredits =
        selectedReadingType === READING_TYPES.DETAILED
          ? detailedCredits.creditStatus.requiredCredits
          : selectedReadingType === READING_TYPES.WRITTEN
            ? writtenCredits.creditStatus.requiredCredits
            : 0;

      const { data: rpcResult, error: rpcError } = await supabase.rpc(
        'fn_create_reading_with_debit',
        {
          p_user_id: user.id,
          p_reading_type: readingData.readingType,
          p_spread_name: t('situationAnalysis.data.spreadName'),
          p_title: readingData.title || t('situationAnalysis.data.spreadTitle'),
          p_interpretation: readingData.interpretation,
          p_cards: readingData.cards.selectedCards,
          p_questions: readingData.questions,
          p_cost_credits: costCredits,
          p_metadata: {
            duration: readingData.metadata.duration,
            platform: readingData.metadata.platform,
          },
          p_idempotency_key: `reading_${user.id}_${readingData.timestamp}`,
        }
      );
      if (rpcError) {
        throw rpcError;
      }

      // Email gönderimi (asenkron, hata durumunda okuma kaydını etkilemez)
      // Server-side API endpoint'e istek gönder
      triggerEmailSending(rpcResult?.id, readingData).catch(() => {
        // Email gönderimi başarısız - sessizce devam et
      });

      return {
        success: true,
        id: rpcResult?.id,
        userId: user.id,
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Bilinmeyen hata',
      };
    }
  };

  // Okumayı kaydetme fonksiyonu
  const handleSaveReading = async () => {
    // User authentication removed - simplified flow

    setSavingReading(true);
    try {
      // Basit okuma için sadece sayaç kaydı
      if (selectedReadingType === READING_TYPES.SIMPLE) {
        // Basit okuma sayacı için minimal kayıt
        const simpleReadingData = {
          userId: 'anonymous-user',
          readingType: 'situationAnalysis', // Veritabanındaki enum değeri ile uyumlu
          cards: { selectedCards: [] }, // Boş kart listesi
          interpretation: t('situationAnalysis.data.simpleInterpretation'),
          question: { type: 'simple' },
          status: 'completed',
          title: t('situationAnalysis.data.simpleTitle'),
          cost_credits: 0, // Ücretsiz
          admin_notes: 'Simple reading counter',
        };

        // Database'e kaydet
        await saveReadingToSupabase(simpleReadingData);

        showToast(
          t('situationAnalysis.messages.simpleReadingCompleted'),
          'success'
        );
        router.push('/dashboard');
        return;
      }

      // DETAILED/WRITTEN için backend optimizasyon şemasına uygun kaydetme
      if (
        selectedReadingType === READING_TYPES.DETAILED ||
        selectedReadingType === READING_TYPES.WRITTEN
      ) {
        const duration = Date.now() - startTime;
        // creditCost kaldırıldı - login sistemi kaldırıldı

        // Standardize edilmiş veri yapısı
        const readingData = {
          userId: 'anonymous-user', // User ID kaldırıldı - login sistemi kaldırıldı
          readingType: 'situationAnalysis', // Veritabanındaki enum değeri ile uyumlu
          status: 'completed',
          // creditCost kaldırıldı
          title: t('situationAnalysis.data.detailedTitle'),
          interpretation: generateBasicInterpretation(),
          cards: {
            selectedCards: selectedCards
              .filter((card): card is TarotCard => card !== null)
              .map((card, idx) => ({
                id: card.id,
                name: card.name,
                nameTr: card.nameTr,
                isReversed: isReversed[idx],
              })),
            positions: config.positionsInfo.map(pos => ({
              id: pos.id,
              title: pos.title,
              description: pos.desc,
            })),
          },
          questions: {
            personalInfo: {
              name: personalInfo.name,
              surname: personalInfo.surname,
              birthDate: personalInfo.birthDate,
              email: personalInfo.email,
            },
            userQuestions: questions,
          },
          metadata: {
            duration,
            platform: 'web',
            ipHash: 'hashed_ip_address', // Güvenlik için IP hash
            userAgent:
              typeof navigator !== 'undefined' ? navigator.userAgent : '',
            readingFormat: selectedReadingType, // Sesli/yazılı bilgisi
            readingFormatTr:
              selectedReadingType === READING_TYPES.DETAILED
                ? t('situationAnalysis.data.readingFormats.detailed')
                : selectedReadingType === READING_TYPES.WRITTEN
                  ? t('situationAnalysis.data.readingFormats.written')
                  : t('situationAnalysis.data.readingFormats.simple'),
          },
          timestamp: new Date().toISOString(),
          createdAt: new Date(),
          updatedAt: new Date(),
        };

        // Okuma verisini Supabase'e kaydet
        const saveResult = await saveReadingToSupabase(readingData);

        if (saveResult.success) {
          showToast(
            t('situationAnalysis.messages.readingSavedSuccess'),
            'success'
          );
        } else {
          showToast(t('situationAnalysis.messages.readingSaveError'), 'error');
        }

        // Başarı modal'ını göster
        setModalStates(prev => ({ ...prev, showSuccessModal: true }));

        // 1.5 saniye sonra modal'ı kapat ve profile yönlendir
        setTimeout(() => {
          setModalStates(prev => ({ ...prev, showSuccessModal: false }));
          router.push('/dashboard');
        }, 1500);
        return;
      }
    } catch (error) {
      showToast(t('situationAnalysis.messages.readingSaveError'), 'error');
    } finally {
      setSavingReading(false);
    }
  };

  // Pozisyona özel kart anlamını al
  const getSituationAnalysisCardMeaning = (
    card: TarotCard | null,
    position: number,
    isReversed: boolean
  ): string => {
    if (!card) {
      return '';
    }
    const meaning = getSituationAnalysisMeaningByCardAndPosition(
      card,
      position,
      isReversed
    );
    if (!meaning) {
      return isReversed ? card.meaningTr.reversed : card.meaningTr.upright;
    }
    return isReversed ? meaning.reversed : meaning.upright;
  };

  // Basit yorum oluştur (kartlar eksikse uyarı ver)
  const generateBasicInterpretation = (): string => {
    const cards = selectedCards as TarotCard[];
    if (
      selectedCards.length !== config.cardCount ||
      selectedCards.some(c => !c)
    ) {
      return t('situationAnalysis.messages.allCardsRequired');
    }
    let interpretation = `🔍 **${t('situationAnalysis.messages.interpretationTitle')}**\n\n`;
    if (userQuestion.trim()) {
      interpretation += `**${t('situationAnalysis.messages.interpretationGreeting').replace('{question}', userQuestion)}**\n\n`;
    }
    config.positionsInfo.forEach((posInfo, index) => {
      const card = cards[index];
      const reversed = !!isReversed[index];
      if (card) {
        interpretation += `**${posInfo.id}. ${posInfo.title}: ${card.nameTr}** (${reversed ? t('situationAnalysis.data.cardDirections.reversed') : t('situationAnalysis.data.cardDirections.upright')})\n*${posInfo.desc}*\n${getSituationAnalysisCardMeaning(card, posInfo.id, reversed)}\n\n`;
      }
    });
    interpretation += `💫 **${t('tarotPage.situationAnalysisSpread.summary')}:**\n"${t('tarotPage.situationAnalysisSpread.summaryText')}"`;
    return interpretation;
  };

  // Okuma tipi seçildiğinde parent bileşene bildir
  const handleReadingTypeSelectWithCallback = async (
    type: ReadingType | string
  ) => {
    // useTarotReadingFlow'dan gelen handleReadingTypeSelect'i çağır
    await handleReadingTypeSelect(type);

    // Parent bileşene bildir
    if (onReadingTypeSelected) {
      onReadingTypeSelected();
    }
  };

  // ANA UI RENDER
  return (
    <div className='w-full space-y-6 md:space-y-8'>
      {toast && (
        <Toast message={toast.message} type={toast.type} onClose={hideToast} />
      )}
      {/* BASİT OKUMA SEÇİLDİYSE SORU FORMU KALDIRILDI - Direkt kart seçimi */}
      {/* BİLGİLENDİRME MODAL'ı - DETAILED/WRITTEN SEÇİLDİĞİNDE */}
      <BaseTarotModal
        isOpen={showInfoModal}
        onClose={() => {
          setModalStates(prev => ({ ...prev, showInfoModal: false }));
          setSelectedReadingType(null);
        }}
        theme={config.theme}
        icon={config.icon}
        titleKey={config.i18nKeys.modals.infoTitle}
      >
        <div className='space-y-4'>
          {/* Açılım Hakkında */}
          <div className='bg-green-800/20 border border-green-500/30 rounded-xl p-4'>
            <h3 className='text-green-200 font-semibold mb-2'>
              {t(config.i18nKeys.modals.aboutSpread)}
            </h3>
            <p className='text-gray-300 text-sm leading-relaxed'>
              {t(config.i18nKeys.modals.aboutSpreadText)}
            </p>
          </div>

          {/* Kart Sayısı */}
          <div className='bg-green-800/20 border border-green-500/30 rounded-xl p-4'>
            <h3 className='text-green-200 font-semibold mb-2'>
              {t('situationAnalysis.modals.cardCount')}
            </h3>
            <p className='text-gray-300 text-sm leading-relaxed'>
              {t('situationAnalysis.modals.cardCountText')}
            </p>
          </div>

          {/* Okuma Türü */}
          <div className='bg-green-800/20 border border-green-500/30 rounded-xl p-4'>
            <h3 className='text-green-200 font-semibold mb-2'>
              {selectedReadingType === READING_TYPES.DETAILED
                ? t('situationAnalysis.modals.detailedReading')
                : t('situationAnalysis.modals.writtenReading')}
            </h3>
            <p className='text-gray-300 text-sm leading-relaxed'>
              {selectedReadingType === READING_TYPES.DETAILED
                ? t('situationAnalysis.modals.detailedReadingText')
                : t('situationAnalysis.modals.writtenReadingText')}
            </p>
          </div>

          {/* Süreç */}
          <div className='bg-green-800/20 border border-green-500/30 rounded-xl p-4'>
            <h3 className='text-green-200 font-semibold mb-2'>
              {t('situationAnalysis.modals.process')}
            </h3>
            <div className='space-y-2'>
              <div className='flex items-center text-gray-300 text-sm'>
                <span className='w-6 h-6 bg-green-600 rounded-full flex items-center justify-center text-xs font-bold mr-3'>
                  1
                </span>
                {t('situationAnalysis.modals.step1')}
              </div>
              <div className='flex items-center text-gray-300 text-sm'>
                <span className='w-6 h-6 bg-green-600 rounded-full flex items-center justify-center text-xs font-bold mr-3'>
                  2
                </span>
                {t('situationAnalysis.modals.step2')}
              </div>
              <div className='flex items-center text-gray-300 text-sm'>
                <span className='w-6 h-6 bg-green-600 rounded-full flex items-center justify-center text-xs font-bold mr-3'>
                  3
                </span>
                {t('situationAnalysis.modals.step3')}
              </div>
              <div className='flex items-center text-gray-300 text-sm'>
                <span className='w-6 h-6 bg-green-600 rounded-full flex items-center justify-center text-xs font-bold mr-3'>
                  4
                </span>
                {t('situationAnalysis.modals.step4')}
              </div>
            </div>
          </div>
        </div>

        {/* Modal Footer */}
        <div className='border-t border-green-500/20 p-6 flex-shrink-0 mt-6'>
          <div className='flex gap-3'>
            <button
              onClick={() => {
                setModalStates(prev => ({ ...prev, showInfoModal: false }));
                setSelectedReadingType(null);
              }}
              className='flex-1 bg-slate-700 border border-slate-600 text-gray-300 font-semibold py-3 px-6 rounded-xl transition-colors hover:bg-slate-800'
            >
              {t('situationAnalysis.modals.cancel')}
            </button>
            <button
              onClick={() =>
                setModalStates(prev => ({ ...prev, showInfoModal: false }))
              }
              className='flex-1 bg-gradient-to-r from-green-600 to-green-500 hover:from-green-700 hover:to-green-600 text-white font-semibold py-3 px-6 rounded-xl transition-all duration-300 shadow-lg'
            >
              {t('situationAnalysis.modals.continue')}
            </button>
          </div>
        </div>
      </BaseTarotModal>

      {/* DETAILED/WRITTEN SEÇİLDİYSE KİŞİSEL BİLGİ + 3 SORU FORMU - MOBİL RESPONSIVE */}
      {(selectedReadingType === READING_TYPES.DETAILED ||
        selectedReadingType === READING_TYPES.WRITTEN) &&
        !detailedFormSaved &&
        !showInfoModal && (
          <div
            className='fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm p-4'
            onClick={e => {
              if (e.target === e.currentTarget) {
                // Form kaydetmeden çıkış uyarısı
                if (
                  personalInfo.name ||
                  personalInfo.surname ||
                  personalInfo.email ||
                  questions.concern
                ) {
                  const shouldClose = window.confirm(
                    t('situationAnalysis.messages.formUnsavedWarning')
                  );
                  if (shouldClose) {
                    setSelectedReadingType(null);
                  }
                } else {
                  setSelectedReadingType(null);
                }
              }
            }}
          >
            <div className='bg-slate-900/95 border border-green-500/30 rounded-2xl shadow-2xl w-full max-w-md max-h-[90vh] flex flex-col'>
              {/* Modal Header */}
              <div className='flex items-center justify-between p-6 border-b border-green-500/20 flex-shrink-0'>
                <div className='flex items-center'>
                  <div className='w-12 h-12 flex items-center justify-center bg-green-800/70 rounded-full mr-3 shadow-lg'>
                    <span className='text-xl text-green-200'>🔍</span>
                  </div>
                  <h2 className='text-green-200 text-lg font-semibold'>
                    {t('situationAnalysis.form.personalInfo')}
                  </h2>
                </div>
                <button
                  onClick={() => {
                    // Form kaydetmeden çıkış uyarısı
                    if (
                      personalInfo.name ||
                      personalInfo.surname ||
                      personalInfo.email ||
                      questions.concern
                    ) {
                      const shouldClose = window.confirm(
                        t('situationAnalysis.messages.formUnsavedWarning')
                      );
                      if (shouldClose) {
                        setSelectedReadingType(null);
                      }
                    } else {
                      setSelectedReadingType(null);
                    }
                  }}
                  className='text-gray-400 hover:text-green-300 transition-colors p-2 rounded-lg hover:bg-green-500/10'
                  title='Formu kapat (ESC)'
                >
                  <svg
                    className='w-5 h-5'
                    fill='none'
                    stroke='currentColor'
                    viewBox='0 0 24 24'
                  >
                    <path
                      strokeLinecap='round'
                      strokeLinejoin='round'
                      strokeWidth='2'
                      d='M6 18L18 6M6 6l12 12'
                    />
                  </svg>
                </button>
              </div>

              {/* Scrollable Form Content */}
              <div className='flex-1 overflow-y-auto px-6 py-4'>
                <div className='space-y-4'>
                  {/* Ad Soyad Grid */}
                  <div className='grid grid-cols-1 sm:grid-cols-2 gap-4'>
                    <div>
                      <label className='block text-sm font-medium text-green-200 mb-2'>
                        {t('situationAnalysis.form.firstName')} *
                      </label>
                      <input
                        type='text'
                        value={personalInfo.name}
                        onChange={e =>
                          updatePersonalInfo('name', e.target.value)
                        }
                        placeholder={t(
                          'situationAnalysis.form.placeholders.firstName'
                        )}
                        className={`w-full px-4 py-3 bg-slate-800/80 border ${
                          formErrors.name
                            ? 'border-red-500'
                            : 'border-green-400/50'
                        } rounded-xl text-white placeholder-gray-400 focus:border-green-400 focus:ring-2 focus:ring-green-400/20 transition-all duration-200 text-base`}
                        autoComplete='given-name'
                      />
                      {formErrors.name && (
                        <p className='text-xs text-red-400 mt-1'>
                          {formErrors.name}
                        </p>
                      )}
                    </div>

                    <div>
                      <label className='block text-sm font-medium text-green-200 mb-2'>
                        {t('situationAnalysis.form.lastName')} *
                      </label>
                      <input
                        type='text'
                        value={personalInfo.surname}
                        onChange={e =>
                          updatePersonalInfo('surname', e.target.value)
                        }
                        placeholder={t(
                          'situationAnalysis.form.placeholders.lastName'
                        )}
                        className={`w-full px-4 py-3 bg-slate-800/80 border ${
                          formErrors.surname
                            ? 'border-red-500'
                            : 'border-green-400/50'
                        } rounded-xl text-white placeholder-gray-400 focus:border-green-400 focus:ring-2 focus:ring-green-400/20 transition-all duration-200 text-base`}
                        autoComplete='family-name'
                      />
                      {formErrors.surname && (
                        <p className='text-xs text-red-400 mt-1'>
                          {formErrors.surname}
                        </p>
                      )}
                    </div>
                  </div>

                  {/* Doğum Tarihi */}
                  <div>
                    <label className='block text-sm font-medium text-green-200 mb-2'>
                      {t('situationAnalysis.form.birthDate')} *
                    </label>
                    <input
                      type='date'
                      value={personalInfo.birthDate}
                      onChange={e =>
                        updatePersonalInfo('birthDate', e.target.value)
                      }
                      className={`w-full px-4 py-3 bg-slate-800/80 border ${
                        formErrors.birthDate
                          ? 'border-red-500'
                          : 'border-green-400/50'
                      } rounded-xl text-white focus:border-green-400 focus:ring-2 focus:ring-green-400/20 transition-all duration-200 text-base`}
                    />
                    {formErrors.birthDate && (
                      <p className='text-xs text-red-400 mt-1'>
                        {formErrors.birthDate}
                      </p>
                    )}
                  </div>

                  {/* E-posta */}
                  <div>
                    <label className='block text-sm font-medium text-green-200 mb-2'>
                      {t('situationAnalysis.form.email')} *
                    </label>
                    <input
                      type='email'
                      value={personalInfo.email}
                      onChange={e =>
                        updatePersonalInfo('email', e.target.value)
                      }
                      placeholder={t(
                        'situationAnalysis.form.placeholders.email'
                      )}
                      className={`w-full px-4 py-3 bg-slate-800/80 border ${
                        formErrors.email
                          ? 'border-red-500'
                          : 'border-green-400/50'
                      } rounded-xl text-white placeholder-gray-400 focus:border-green-400 focus:ring-2 focus:ring-green-400/20 transition-all duration-200 text-base`}
                      autoComplete='email'
                    />
                    {formErrors.email && (
                      <p className='text-xs text-red-400 mt-1'>
                        {formErrors.email}
                      </p>
                    )}
                  </div>

                  {/* Sorular Bölümü */}
                  <div className='pt-4 border-t border-green-500/20'>
                    <h3 className='text-green-200 font-medium mb-4 text-center'>
                      {t('situationAnalysis.form.questions')}
                    </h3>

                    <div className='space-y-4'>
                      <div>
                        <label className='block text-sm font-medium text-green-200 mb-2'>
                          {t('situationAnalysis.form.concernQuestion')}
                        </label>
                        <textarea
                          value={questions.concern}
                          onChange={e =>
                            updateQuestion('concern', e.target.value)
                          }
                          placeholder={t(
                            'situationAnalysis.form.placeholders.concernQuestion'
                          )}
                          className={`w-full px-4 py-3 bg-slate-800/80 border ${
                            formErrors.concern
                              ? 'border-red-500'
                              : 'border-green-400/50'
                          } rounded-xl text-white placeholder-gray-400 focus:border-green-400 focus:ring-2 focus:ring-green-400/20 transition-all duration-200 text-base resize-none`}
                          rows={3}
                        />
                        {formErrors.concern && (
                          <p className='text-xs text-red-400 mt-1'>
                            {formErrors.concern}
                          </p>
                        )}
                      </div>

                      <div>
                        <label className='block text-sm font-medium text-green-200 mb-2'>
                          {t('situationAnalysis.form.understandingQuestion')}
                        </label>
                        <textarea
                          value={questions.understanding}
                          onChange={e =>
                            updateQuestion('understanding', e.target.value)
                          }
                          placeholder={t(
                            'situationAnalysis.form.placeholders.understandingQuestion'
                          )}
                          className={`w-full px-4 py-3 bg-slate-800/80 border ${
                            formErrors.understanding
                              ? 'border-red-500'
                              : 'border-green-400/50'
                          } rounded-xl text-white placeholder-gray-400 focus:border-green-400 focus:ring-2 focus:ring-green-400/20 transition-all duration-200 text-base resize-none`}
                          rows={3}
                        />
                        {formErrors.understanding && (
                          <p className='text-xs text-red-400 mt-1'>
                            {formErrors.understanding}
                          </p>
                        )}
                      </div>

                      <div>
                        <label className='block text-sm font-medium text-green-200 mb-2'>
                          {t('situationAnalysis.form.emotionalQuestion')}
                        </label>
                        <textarea
                          value={questions.emotional}
                          onChange={e =>
                            updateQuestion('emotional', e.target.value)
                          }
                          placeholder={t(
                            'situationAnalysis.form.placeholders.emotionalQuestion'
                          )}
                          className={`w-full px-4 py-3 bg-slate-800/80 border ${
                            formErrors.emotional
                              ? 'border-red-500'
                              : 'border-green-400/50'
                          } rounded-xl text-white placeholder-gray-400 focus:border-green-400 focus:ring-2 focus:ring-green-400/20 transition-all duration-200 text-base resize-none`}
                          rows={3}
                        />
                        {formErrors.emotional && (
                          <p className='text-xs text-red-400 mt-1'>
                            {formErrors.emotional}
                          </p>
                        )}
                      </div>
                    </div>
                  </div>

                  {formErrors.general && (
                    <div className='text-sm text-red-400 bg-red-500/10 border border-red-500/30 rounded-xl p-3 text-center'>
                      {formErrors.general}
                    </div>
                  )}
                </div>
              </div>

              {/* Modal Footer - Her zaman görünür */}
              <div className='p-6 border-t border-green-500/20 flex-shrink-0'>
                <button
                  onClick={handleSaveDetailedFormClick}
                  className='w-full bg-gradient-to-r from-green-600 to-green-600 hover:from-green-700 hover:to-green-700 text-white font-semibold py-4 px-6 rounded-xl transition-all duration-200 disabled:opacity-60 disabled:cursor-not-allowed shadow-lg hover:shadow-xl text-base'
                  disabled={isSaving}
                >
                  {isSaving ? (
                    <div className='flex items-center justify-center'>
                      <div className='w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin mr-2'></div>
                      {t('situationAnalysis.form.saving')}
                    </div>
                  ) : (
                    t('situationAnalysis.form.saveAndOpen')
                  )}
                </button>
              </div>
            </div>
          </div>
        )}

      {/* Kredi Onay Modalı */}
      {showCreditConfirm && (
        <div className='fixed inset-0 z-50 bg-black/60 flex items-center justify-center'>
          <div className='bg-slate-900 border border-green-500/40 rounded-2xl shadow-2xl p-8 max-w-sm w-full mx-4'>
            <h2 className='text-xl font-bold text-green-400 mb-4 text-center'>
              {t('situationAnalysis.modals.creditConfirm')}
            </h2>
            <p className='text-gray-200 text-center mb-6'>
              {t('situationAnalysis.modals.creditConfirmMessage')}
            </p>
            <div className='flex justify-center gap-4'>
              <button
                onClick={saveDetailedForm}
                disabled={isSaving}
                className='bg-gradient-to-r from-green-600 to-green-500 hover:from-green-700 hover:to-green-600 text-white font-semibold py-2 px-6 rounded-lg transition-colors disabled:opacity-60'
              >
                {isSaving
                  ? t('situationAnalysis.modals.processing')
                  : t('situationAnalysis.modals.confirm')}
              </button>
              <button
                onClick={() =>
                  setModalStates(prev => ({
                    ...prev,
                    showCreditConfirm: false,
                  }))
                }
                disabled={isSaving}
                className='bg-slate-700 border border-slate-600 text-gray-300 font-semibold py-2 px-6 rounded-lg transition-colors hover:bg-slate-800 disabled:opacity-60'
              >
                {t('situationAnalysis.modals.cancel')}
              </button>
            </div>
          </div>
        </div>
      )}

      {selectedReadingType === null && (
        <div className='flex justify-center'>
          <BaseReadingTypeSelector
            selectedType={selectedReadingType}
            onTypeSelect={handleReadingTypeSelectWithCallback}
            onCreditInfoClick={() => router.push('/dashboard/credits')}
            readingTypes={READING_TYPES}
            readingType='SITUATION_ANALYSIS_DETAILED'
            theme='green'
            disabled={isSaving}
          />
        </div>
      )}

      {selectedReadingType &&
        currentPosition &&
        currentPosition <= config.cardCount && (
          <div className='flex justify-center mb-4'>
            <div className='bg-gradient-to-r from-green-600/20 via-slate-500/30 to-green-500/20 border border-green-500/50 rounded-2xl px-6 py-3 shadow-lg animate-pulse'>
              <div className='flex items-center space-x-3'>
                <div className='w-6 h-6 bg-green-400/20 rounded-full flex items-center justify-center'>
                  <span className='text-green-300 text-sm'>🔍</span>
                </div>
                <div className='text-center'>
                  <div className='text-green-200 font-bold text-lg'>
                    {config.positionsInfo[currentPosition - 1]?.title ?? ''}
                  </div>
                  <div className='text-gray-300 text-xs'>
                    {config.positionsInfo[currentPosition - 1]?.desc ?? ''}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

      {/* Kart Pozisyonları Canvas */}
      <BaseTarotCanvas
        config={config}
        selectedCards={selectedCards}
        cardStates={cardStates}
        isReversed={isReversed}
        currentPosition={currentPosition || 0}
        onCardDetails={setShowCardDetails}
        onToggleCard={toggleCardState}
        selectedReadingType={selectedReadingType}
        detailedFormSaved={detailedFormSaved}
        className='mb-6'
      />

      <BaseCardGallery
        deck={deck}
        usedCardIds={new Set(usedCardIds.map(id => Number(id)))}
        nextPosition={selectedReadingType ? currentPosition : null}
        onCardSelect={
          selectedReadingType
            ? handleCardSelect
            : () => {
                showToast(
                  t('situationAnalysis.messages.selectReadingTypeFirst'),
                  'info'
                );
              }
        }
        onShuffleDeck={shuffleDeck}
        canSelectCards={
          selectedReadingType === READING_TYPES.SIMPLE ||
          ((selectedReadingType === READING_TYPES.DETAILED ||
            selectedReadingType === READING_TYPES.WRITTEN) &&
            detailedFormSaved)
        }
        theme='green'
        renderCard={(card, isUsed, canSelect) => (
          <BaseCardRenderer
            card={card}
            isUsed={isUsed}
            canSelect={canSelect}
            mode='gallery'
            theme='green'
          />
        )}
        translations={{
          nextPosition: t('gallery.nextPosition'),
          allPositionsFull: t('gallery.allPositionsFull'),
          shuffle: t('gallery.shuffle'),
          scrollToSeeAll: t('gallery.scrollToSeeAll'),
          emptyDeck: t('gallery.emptyDeck'),
        }}
      />

      {selectedCards.filter(c => c !== null).length > 0 && (
        <div className='flex justify-center'>
          <button
            onClick={handleClearAll}
            className='px-8 py-3 bg-gradient-to-r from-green-500/30 to-green-500/20 border border-green-500/50 rounded-2xl text-green-400 hover:bg-green-500/40 hover:border-green-500/70 transition-all duration-300 font-semibold shadow-md shadow-green-500/10'
          >
            {t('situationAnalysis.form.clearAll')}
          </button>
        </div>
      )}

      {showCardDetails && (
        <CardDetails
          card={showCardDetails}
          isReversed={(() => {
            const idx = selectedCards.findIndex(
              (c: TarotCard | null) => c && c.id === showCardDetails.id
            );
            return !!isReversed[idx >= 0 ? idx : 0];
          })()}
          position={(() => {
            const idx = selectedCards.findIndex(
              (c: TarotCard | null) => c && c.id === showCardDetails.id
            );
            return (idx >= 0 ? idx : 0) + 1;
          })()}
          onClose={() => setShowCardDetails(null)}
          spreadType='situation-analysis'
          positionInfo={(() => {
            const idx = selectedCards.findIndex(
              (c: TarotCard | null) => c && c.id === showCardDetails.id
            );
            const p = config.positionsInfo[idx];
            return p
              ? { title: p.title, desc: p.desc }
              : { title: `Pozisyon ${idx + 1}`, desc: 'Kart pozisyonu' };
          })()}
        />
      )}

      {selectedCards.filter(c => c !== null).length === config.cardCount &&
        selectedReadingType && (
          <div ref={interpretationRef} className='space-y-6'>
            <BaseTarotInterpretation
              config={config}
              cards={selectedCards}
              isReversed={isReversed}
              title={t('situationAnalysis.data.interpretationTitle')}
              icon='🔍'
              badgeText={t('situationAnalysis.data.badgeText')}
              positionsInfo={config.positionsInfo}
              getPositionSpecificInterpretation={(card, position, isReversed) =>
                getSituationAnalysisCardMeaning(card, position, isReversed)
              }
              showContext={true}
              onSaveReading={handleSaveReading}
              isSavingReading={isSavingReading}
              showSaveButton={
                selectedReadingType === READING_TYPES.DETAILED ||
                selectedReadingType === READING_TYPES.WRITTEN
              }
            />
          </div>
        )}

      {/* Başarı Modal'ı */}
      {showSuccessModal && (
        <div className='fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4'>
          <div className='bg-gradient-to-br from-green-900/95 to-green-900/95 border border-green-500/30 rounded-3xl shadow-2xl max-w-md w-full p-8 text-center'>
            {/* Başarı İkonu */}
            <div className='w-20 h-20 bg-gradient-to-br from-green-400 to-green-600 rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg'>
              <span className='text-3xl'>✅</span>
            </div>

            {/* Başlık */}
            <h2 className='text-2xl font-bold text-green-400 mb-4'>
              {t('situationAnalysis.modals.successTitle')}
            </h2>

            {/* Mesaj */}
            <p className='text-green-200 mb-6 leading-relaxed'>
              {t('situationAnalysis.modals.successMessage')}
            </p>

            {/* Bilgi */}
            <div className='bg-green-800/30 border border-green-500/20 rounded-xl p-4 mb-6'>
              <p className='text-green-300 text-sm'>
                {t('situationAnalysis.modals.redirecting')}
              </p>
            </div>

            {/* Progress Bar */}
            <div className='w-full bg-green-800/30 rounded-full h-2 mb-4'>
              <div className='bg-gradient-to-r from-green-400 to-green-600 h-2 rounded-full animate-pulse'></div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

/**
 * Email gönderimi için API endpoint'e istek gönder
 */
async function triggerEmailSending(
  readingId: string | undefined,
  _readingData: any
): Promise<void> {
  if (!readingId) {
    return;
  }

  try {
    // Server-side API endpoint'e sadece readingId gönder
    // API kendi Supabase'den gerçek veriyi çekecek
    const response = await fetch('/api/send-reading-email', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        readingId,
      }),
    });

    if (!response.ok) {
      // Email gönderimi başarısız - sessizce devam et
    }
  } catch (error) {
    // Email gönderimi API hatası - sessizce devam et
  }
}
