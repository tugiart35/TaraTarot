/*
info:
---
Dosya Amacı:
- Kariyer açılımı ana bileşeni - 4 kartlık kariyer odaklı tarot açılımı
- Kullanıcı kart seçer, pozisyonları yönetir ve kariyer yorumu alır
- Aşk açılımı ile benzer yapıda ama kariyer temasına uygun

Üretime Hazır mı?:
- Dosya kariyer açılımı için tüm temel işlevleri içerir, üretime hazırdır
- Kart seçimi, pozisyon yönetimi ve yorum sistemi mevcut
- Kariyer temasına uygun UI ve renk paleti kullanılmış

Kullanım:
- tarotSpreads.ts tarafından dinamik olarak yüklenir
- Kariyer açılımı sayfasında ana bileşen olarak kullanılır
- 4 kartlık kariyer odaklı tarot okuma sağlar
---
*/

'use client';

import { getCareerMeaningByCardAndPosition } from '@/features/tarot/lib/career/position-meanings-index';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useToast } from '@/hooks/useToast';
import { supabase } from '@/lib/supabase/client';
import {
  Toast,
  BaseCardPosition,
  BaseCardGallery,
} from '@/features/shared/ui';
import { useTarotReading } from '@/hooks/useTarotReading';
import { useTranslations } from '@/hooks/useTranslations';
import { useReadingCredits } from '@/hooks/useReadingCredits';
import { useAuth } from '@/hooks/useAuth';
import { findSpreadById } from '@/lib/constants/tarotSpreads';
import { CAREER_POSITIONS_INFO, CAREER_POSITIONS_LAYOUT } from './career-config';
import { CardDetails } from '@/features/shared/ui';
import CareerCardRenderer from './CareerCardRenderer';
import CareerInterpretation from './CareerInterpretation';
import CareerReadingTypeSelector from './CareerReadingTypeSelector';

// Kariyer Açılımı için toplam kart sayısı
export const CAREER_CARD_COUNT = 4;

// Okuma tipleri
import { READING_TYPES, ReadingType, TarotCard } from '@/types/tarot';

interface CareerReadingProps {
  onComplete?: (_cards: TarotCard[], _interpretation: string) => void;
  onPositionChange?: (_title: string) => void;
}

// Ana Kariyer Açılımı bileşeni
export default function CareerReading({
  onComplete: _onComplete,
  onPositionChange: _onPositionChange,
}: CareerReadingProps) {
  const router = useRouter();
  const { t } = useTranslations();
  const { user } = useAuth();
  const careerSpread = findSpreadById('career-spread');

  // Kredi yönetimi
  const detailedCredits = useReadingCredits('CAREER_SPREAD_DETAILED');
  const writtenCredits = useReadingCredits('CAREER_SPREAD_WRITTEN');

  // useTarotReading hook'unu kullan
  const {
    selectedCards,
    usedCardIds,
    showCardDetails,
    cardStates,
    isReversed,
    deck,
    currentPosition,
    handleCardSelect,
    handleCardDetails,
    setShowCardDetails,
    toggleCardState,
    handleClearAll,
    shuffleDeck,
    interpretationRef,
    userQuestion,
    selectedReadingType,
    setSelectedReadingType,
  } = useTarotReading({
    config: {
      cardCount: CAREER_CARD_COUNT,
      positionsInfo: CAREER_POSITIONS_INFO,
    },
    onComplete: (_cards, _interpretation) => {
      // Kariyer açılımı tamamlandı
    },
    onPositionChange: _title => {
      // Pozisyon değişti
    },
  });

  // State'ler
  const { toast, showToast, hideToast } = useToast();
  const [startTime] = useState<number>(Date.now()); // Duration tracking için

  // DETAILED/WRITTEN için ek state'ler
  const [personalInfo, setPersonalInfo] = useState({
    name: '',
    surname: '',
    birthDate: '',
    email: '',
  });
  const [questions, setQuestions] = useState({
    concern: '',
    understanding: '',
    emotional: '',
  });

  // Modal state'leri
  const [showInterpretation, setShowInterpretation] = useState(false);
  const [showCreditModal, setShowCreditModal] = useState(false);

  // Kart seçimi tamamlandı mı kontrolü
  const isCardSelectionComplete = selectedCards.every(card => card !== null);

  // Kariyer yorumu oluştur
  const generateCareerInterpretation = (): string => {
    if (!isCardSelectionComplete) return '';

    let interpretation = 'KARİYER AÇILIMI YORUMU\n\n';
    
    CAREER_POSITIONS_INFO.forEach((position, index) => {
      const card = selectedCards[index];
      if (card) {
        const meaning = getCareerMeaningByCardAndPosition(
          card,
          position.id,
          isReversed[index]
        );
        
        interpretation += `${position.title}:\n`;
        interpretation += `${card.nameTr} ${isReversed[index] ? '(Ters)' : '(Düz)'}\n`;
        interpretation += `${meaning?.upright || 'Yorum bulunamadı'}\n\n`;
      }
    });

    return interpretation;
  };

  // Okuma tamamlama
  const handleCompleteReading = async () => {
    if (!isCardSelectionComplete) {
      showToast('Lütfen tüm kartları seçin', 'error');
      return;
    }

    const interpretation = generateCareerInterpretation();
    
    // Backend'e kaydet - burada backend'e bağlanılacak
    try {
      if (user) {
        const { error } = await supabase
          .from('user_readings')
          .insert({
            user_id: user.id,
            spread_type: 'career-spread',
            reading_type: selectedReadingType,
            cards: selectedCards.map(card => card?.id),
            is_reversed: isReversed,
            interpretation: interpretation,
            user_question: userQuestion,
            duration: Date.now() - startTime,
            created_at: new Date().toISOString(),
          });

        if (error) {
          console.error('Okuma kaydetme hatası:', error);
          showToast('Okuma kaydedilirken hata oluştu', 'error');
        } else {
          showToast('Kariyer açılımı başarıyla kaydedildi', 'success');
        }
      }
    } catch (error) {
      console.error('Okuma kaydetme hatası:', error);
      showToast('Okuma kaydedilirken hata oluştu', 'error');
    }

    // Yorum modalını aç
    setShowInterpretation(true);
  };

  // Kredi onayı
  const handleCreditApproval = () => {
    setShowCreditModal(false);
    handleCompleteReading();
  };

  // Okuma tipi değiştiğinde kredi kontrolü
  useEffect(() => {
    if (selectedReadingType === READING_TYPES.DETAILED || selectedReadingType === READING_TYPES.WRITTEN) {
      setShowCreditModal(true);
    }
  }, [selectedReadingType]);

  return (
    <div className='w-full space-y-6 md:space-y-8'>
      {toast && (
        <Toast message={toast.message} type={toast.type} onClose={hideToast} />
      )}
      {/* KARİYER AÇILIMI ANA SAHNESI */}
      <div className='w-full relative overflow-hidden rounded-2xl shadow-2xl bg-gradient-to-br from-blue-900/90 via-slate-900/80 to-green-800/80 border border-blue-700/60'>
        {/* KARTLAR KİLİTLİ OVERLAY veya SORU/DETAYLI FORMU */}
        {selectedReadingType === null && (
          <div className='absolute inset-0 z-30 flex flex-col items-center justify-center bg-black/60 backdrop-blur-[2px] rounded-2xl'>
            <div className='flex flex-col items-center'>
              <div className='w-16 h-16 flex items-center justify-center bg-blue-800/70 rounded-full mb-2 shadow-lg'>
                <svg
                  xmlns='http://www.w3.org/2000/svg'
                  className='h-10 w-10 text-blue-300'
                  fill='none'
                  viewBox='0 0 24 24'
                  stroke='currentColor'
                >
                  <path
                    strokeLinecap='round'
                    strokeLinejoin='round'
                    strokeWidth={2}
                    d='M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 012 2v6a2 2 0 01-2 2H6a2 2 0 01-2-2V8a2 2 0 012-2V6'
                  />
                </svg>
              </div>
              <div className='text-blue-200 text-base font-semibold mb-1'>
                Kartlar Kilitli
              </div>
              <div className='text-blue-400 text-sm text-center max-w-xs'>
                Önce bir okuma tipi seçin
              </div>
            </div>
          </div>
        )}

        <div className='absolute inset-0 rounded-2xl overflow-hidden'>
          <div
            className='absolute inset-0 bg-gradient-to-br from-blue-900/10 via-slate-900/60 to-green-900/20 backdrop-blur-[2px]'
            style={{ zIndex: 1 }}
          />
          <img
            src='/images/bg-3card-tarot.jpg'
            alt='Career Tarot Reading background'
            className='absolute inset-0 w-full h-full object-cover object-center opacity-60'
            loading='lazy'
            style={{ zIndex: 0 }}
          />
          <div
            className='absolute inset-0 bg-gradient-to-br from-blue-900/80 via-slate-900/10 to-green-900/80'
            style={{ zIndex: 2 }}
          />
        </div>

        <div
          className='absolute inset-0 bg-black/30 backdrop-blur-[1.5px] rounded-2xl'
          style={{ zIndex: 4 }}
        />

        <div className='relative z-10 p-2 xs:p-3 sm:p-4 md:p-6 lg:p-8'>
          <div className='relative w-full h-full min-h-[320px] xs:min-h-[360px] sm:min-h-[400px] md:min-h-[440px] lg:min-h-[480px] xl:min-h-[520px]'>
            {CAREER_POSITIONS_LAYOUT.map((position, idx) => (
              <BaseCardPosition
                key={position.id}
                position={position}
                card={selectedCards[position.id - 1] ?? null}
                isOpen={!!cardStates[position.id - 1]}
                isReversed={!!isReversed[position.id - 1]}
                isNextPosition={currentPosition === position.id}
                onToggleCard={() => toggleCardState(position.id)}
                onCardDetails={handleCardDetails}
                positionInfo={{
                  title: CAREER_POSITIONS_INFO[position.id - 1]?.title || '',
                  desc: CAREER_POSITIONS_INFO[position.id - 1]?.description || ''
                }}
                renderCard={(card, props) => (
                  <CareerCardRenderer
                    card={card}
                    isReversed={props.isReversed}
                    isSelected={props.isOpen}
                    onClick={() => {
                      if (props.mode === 'position') {
                        toggleCardState(position.id);
                      } else {
                        handleCardDetails(card);
                      }
                    }}
                    className={`
                      ${props.mode === 'position' ? 'w-16 h-24 md:w-20 md:h-28' : 'w-20 h-32 md:w-24 md:h-36'}
                      ${props.isOpen ? 'ring-2 ring-blue-400' : ''}
                      transition-all duration-300
                    `}
                  />
                )}
                cardSize="medium"
                colorScheme="blue"
              />
            ))}
          </div>
        </div>
      </div>

      {/* Okuma Tipi Seçici */}
      <div className="mb-8">
        <CareerReadingTypeSelector
          selectedType={selectedReadingType}
          onTypeChange={setSelectedReadingType}
          onCreditInfoClick={() => setShowCreditModal(true)}
        />
      </div>

      {/* Kart Galerisi */}
      {!isCardSelectionComplete && (
        <BaseCardGallery
          deck={deck}
          usedCardIds={usedCardIds}
          nextPosition={selectedReadingType ? currentPosition : null}
          onCardSelect={
            selectedReadingType
              ? handleCardSelect
              : () => {
                  showToast('Lütfen önce bir okuma tipi seçin.', 'info');
                }
          }
          onShuffleDeck={shuffleDeck}
          canSelectCards={!!selectedReadingType}
          renderCard={(card, isUsed, canSelect) => (
            <CareerCardRenderer
              card={card}
              isReversed={false}
              isSelected={false}
              onClick={() => {
                if (canSelect) {
                  handleCardSelect(card);
                }
              }}
              className={`
                ${isUsed ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer hover:scale-105'}
                ${canSelect ? 'hover:ring-2 hover:ring-blue-400' : ''}
                transition-all duration-200
              `}
            />
          )}
          translations={{
            nextPosition: 'Sıradaki pozisyon',
            allPositionsFull: 'Tüm pozisyonlar dolu',
            shuffle: 'Karıştır',
            scrollToSeeAll: 'Tüm kartları görmek için kaydırın',
            emptyDeck: 'Kart kalmadı',
          }}
        />
      )}

      {/* Kontrol Butonları */}
      <div className="flex flex-wrap gap-4 justify-center mb-8">
        <button
          onClick={handleClearAll}
          className="px-6 py-3 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors"
        >
          Tümünü Temizle
        </button>
        <button
          onClick={shuffleDeck}
          className="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
        >
          Kartları Karıştır
        </button>
        {isCardSelectionComplete && (
          <button
            onClick={handleCompleteReading}
            className="px-8 py-3 bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white rounded-lg transition-all font-semibold"
          >
            Yorumu Görüntüle
          </button>
        )}
      </div>


      {/* Kart Detayları Modal */}
      {showCardDetails && (
        <CardDetails
          card={showCardDetails}
          isReversed={isReversed[selectedCards.findIndex(c => c?.id === showCardDetails.id)]}
          onClose={() => setShowCardDetails(null)}
          onToggleReversed={() => {
            const index = selectedCards.findIndex(c => c?.id === showCardDetails.id);
            if (index !== -1) {
              toggleCardState(index);
            }
          }}
        />
      )}

      {/* Yorum Modal */}
      {showInterpretation && (
        <CareerInterpretation
          selectedCards={selectedCards}
          isReversed={isReversed}
          onClose={() => setShowInterpretation(false)}
        />
      )}

      {/* Kredi Onay Modal */}
      {showCreditModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-gradient-to-br from-blue-900/95 to-green-900/95 backdrop-blur-lg rounded-2xl border border-blue-400/30 max-w-md w-full p-6">
            <h3 className="text-xl font-bold text-white mb-4">Kredi Onayı</h3>
            <p className="text-blue-200 mb-6">
              {selectedReadingType === READING_TYPES.DETAILED 
                ? `Detaylı kariyer okuması için ${detailedCredits.creditStatus.requiredCredits} kredi gereklidir.`
                : `Yazılı kariyer okuması için ${writtenCredits.creditStatus.requiredCredits} kredi gereklidir.`
              }
            </p>
            <div className="flex gap-3">
              <button
                onClick={() => setShowCreditModal(false)}
                className="flex-1 px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors"
              >
                İptal
              </button>
              <button
                onClick={handleCreditApproval}
                className="flex-1 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors"
              >
                Onayla
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
