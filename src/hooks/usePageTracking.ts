/*
info:
Baƒülantƒ±lƒ± dosyalar:
- lib/supabase/client.ts: Supabase baƒülantƒ±sƒ± (gerekli)
- app/layout.tsx: Ana layout (gerekli)

Dosyanƒ±n amacƒ±:
- Sayfa g√∂r√ºnt√ºleme takibi i√ßin hook
- Otomatik sayfa ziyaret kaydƒ±
- Analytics verilerini toplama

Supabase deƒüi≈ükenleri ve tablolarƒ±:
- page_views: Sayfa g√∂r√ºnt√ºleme kayƒ±tlarƒ±

Geli≈ütirme √∂nerileri:
- Otomatik sayfa takibi
- Session y√∂netimi
- Performans optimizasyonu

Tespit edilen hatalar:
- ‚úÖ Hook yapƒ±sƒ± olu≈üturuldu

Kullanƒ±m durumu:
- ‚úÖ Gerekli: Sayfa analitikleri i√ßin takip sistemi
- ‚úÖ Production-ready: Supabase entegrasyonu ile
*/

import { useEffect, useRef } from 'react';
import { usePathname } from 'next/navigation';
import { supabase } from '@/lib/supabase/client';

interface PageViewData {
  page_path: string;
  page_title?: string;
  referrer?: string;
  user_agent?: string;
  session_id?: string;
  view_duration?: number;
}

export const usePageTracking = () => {
  const pathname = usePathname();
  const startTimeRef = useRef<number>(Date.now());
  const sessionIdRef = useRef<string>('');

  useEffect(() => {
    // Session ID olu≈ütur veya al
    if (!sessionIdRef.current) {
      sessionIdRef.current = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    // Sayfa g√∂r√ºnt√ºleme ba≈ülangƒ±√ß zamanƒ±
    startTimeRef.current = Date.now();

    // Sayfa g√∂r√ºnt√ºleme kaydƒ±
    const trackPageView = async () => {
      try {
        const viewDuration = Math.round(
          (Date.now() - startTimeRef.current) / 1000
        );

        const pageViewData: PageViewData = {
          page_path: pathname,
          page_title: document.title,
          user_agent: navigator.userAgent,
          session_id: sessionIdRef.current,
          view_duration: viewDuration,
        };
        if (document.referrer) pageViewData.referrer = document.referrer;

        // Supabase'e kaydet - page_views tablosu hen√ºz olu≈üturulmamƒ±≈ü
        // TODO: page_views tablosu olu≈üturulduƒüunda aktif et
        /*
        const { error } = await supabase
          .from('page_views')
          .insert([pageViewData]);

        if (error) {
          console.error('Error tracking page view:', error);
        } else if (process.env.NODE_ENV === 'development') {
          console.log('üìä [PAGE TRACKING]', pageViewData);
        }
        */
        
        // Ge√ßici olarak sadece development modunda log
        if (process.env.NODE_ENV === 'development') {
          console.log('üìä [PAGE TRACKING - DISABLED]', pageViewData);
        }
      } catch (error) {
        console.error('Error in page tracking:', error);
      }
    };

    // Sayfa y√ºklendiƒüinde kaydet
    trackPageView();

    // Sayfa deƒüi≈ütiƒüinde √∂nceki sayfa s√ºresini kaydet
    return () => {
      const viewDuration = Math.round(
        (Date.now() - startTimeRef.current) / 1000
      );
      if (viewDuration > 0) {
        // √ñnceki sayfa s√ºresini g√ºncelle (opsiyonel)
        // Bu durumda yeni sayfa zaten kaydedilecek
      }
    };
  }, [pathname]);

  // Manuel sayfa g√∂r√ºnt√ºleme kaydƒ±
  const trackCustomPageView = async (customData: Partial<PageViewData>) => {
    try {
      const pageViewData: PageViewData = {
        page_path: pathname,
        page_title: document.title,
        user_agent: navigator.userAgent,
        session_id: sessionIdRef.current,
        view_duration: Math.round((Date.now() - startTimeRef.current) / 1000),
        ...customData,
      };
      if (document.referrer) pageViewData.referrer = document.referrer;

      // Supabase'e kaydet - page_views tablosu hen√ºz olu≈üturulmamƒ±≈ü
      // TODO: page_views tablosu olu≈üturulduƒüunda aktif et
      /*
      const { error } = await supabase
        .from('page_views')
        .insert([pageViewData]);

      if (error) {
        console.error('Error tracking custom page view:', error);
        return false;
      }
      */

      if (process.env.NODE_ENV === 'development') {
        console.log('üìä [CUSTOM PAGE TRACKING - DISABLED]', pageViewData);
      }

      return true;
    } catch (error) {
      console.error('Error in custom page tracking:', error);
      return false;
    }
  };

  return {
    trackCustomPageView,
    sessionId: sessionIdRef.current,
  };
};
