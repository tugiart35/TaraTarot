{
  "title": "Create Numerology Module & Pages (Follow Project Rules)",
  "persona": "You are a senior Next.js 14/15 + TypeScript engineer working inside the Mystik Tarot project. You must strictly follow the repo's conventions, security policies, and allowed paths. Keep TS strict, prefer RSC, use Tailwind + minimal shadcn, and integrate next-intl.",
  "goals": [
    "Add a mobile-first Numerology experience: landing page, simple calculators (Life Path / Expression / Soul Urge), daily number, result details, and i18n.",
    "Re-use existing project patterns (features/, lib/, providers/, messages/, app/ structure).",
    "Create minimal, accessible UI with Tailwind; only client components where form state is needed (RHF).",
    "Ensure security and SEO (no secrets, NEXT_PUBLIC_* only, metadata, canonical)."
  ],
  "constraints": {
    "language": "TypeScript (strict)",
    "framework": "Next.js 14+ App Router, React 18",
    "ui": ["TailwindCSS", "shadcn/ui (minimal)", "lucide-react (icons)"],
    "forms": ["React Hook Form", "Zod"],
    "state": ["TanStack Query (only if needed)", "No heavy global state"],
    "data": "No external APIs; pure client-side numerology math (Pythagorean).",
    "i18n": "next-intl (tr default; en, sr)",
    "a11y_perf": [
      "WCAG AA, visible focus, semantic HTML",
      "Use next/image, lazy load, dynamic imports where helpful",
      "Prefer RSC; client components only for interactive form"
    ],
    "security_policies": [
      "No secrets in repo; .env* ignored",
      "NEXT_PUBLIC_* only for public values",
      "No service_role on client or edge",
      "Use Turnstile/hCaptcha on public forms if spam risk appears (placeholder only, not implemented here)",
      "Redirect 'next' only to same origin"
    ],
    "authoring": [
      "Provide TS + Tailwind code",
      "All forms with RHF + Zod; i18n messages",
      "Stay within Allowed Paths",
      "Explain any new dependency in code comments",
      "Use pnpm scripts"
    ]
  },
  "allowedPaths": [
    "src/app/(marketing)/",
    "src/app/(protected)/",
    "src/app/api/",
    "src/features/",
    "src/lib/",
    "src/providers/",
    "messages/",
    "tests/numerology/"
  ],
  "acceptanceCriteria": [
    "(/[locale]/numeroloji) renders a mobile-first landing with 3 calculators (Life Path, Expression, Soul Urge) and a Daily Number quick tool.",
    "Submitting the forms shows validated, localized results without page reload. Invalid inputs show localized RHF+Zod errors.",
    "Numerology math uses Pythagorean system (A=1 .. Z=26, reduce to single digit except master numbers 11, 22, 33).",
    "Deep link to results page: /[locale]/numeroloji/[type]?name=…&birth=YYYY-MM-DD reproduces the same result (SSR+RSC safe, client re-hydrates).",
    "i18n keys exist in tr/en/sr files and UI switches language via existing provider.",
    "Lighthouse mobile performance ≥ 90, a11y ≥ 90 on the numerology pages (no blocking fonts, optimized images).",
    "No ESLint/TS errors; pnpm build passes.",
    "Unit tests cover the math helpers; basic e2e covers a successful submit and an invalid input."
  ],
  "architecture": {
    "pages": [
      "src/app/[locale]/(marketing)/numeroloji/page.tsx",
      "src/app/[locale]/(marketing)/numeroloji/[type]/page.tsx"
    ],
    "feature": "src/features/numerology/",
    "lib": [
      "src/lib/numerology/ (pure functions + types)",
      "src/lib/i18n/** (reuse existing patterns)"
    ],
    "messages": ["messages/tr.json", "messages/en.json", "messages/sr.json"]
  },
  "filesToCreate": [
    {
      "path": "src/lib/numerology/types.ts",
      "description": "Type defs for calculators",
      "contents": "export type NumerologyType = 'life-path' | 'expression' | 'soul-urge' | 'daily-number';\nexport type BirthInput = { date: string }; // YYYY-MM-DD\nexport type NameInput = { name: string };\nexport type CalculatorResult = { number: number; master?: 11|22|33; breakdown: string[] };"
    },
    {
      "path": "src/lib/numerology/normalize.ts",
      "description": "String normalization and mapping A1Z26 helpers",
      "contents": "export const onlyLetters = (s:string)=> s.normalize('NFKD').replace(/[^A-Za-z]/g,'').toUpperCase();\nexport const letterValue = (ch:string)=> ((ch.charCodeAt(0)-64-1)%9)+1; // A=1..I=9, J=1…\nexport const reduceNumber = (n:number)=>{ const keep = new Set([11,22,33]); while(n>9 && !keep.has(n)){ n = n.toString().split('').reduce((a,d)=>a+Number(d),0);} return n; };\nexport const sumDigits = (n:number)=> n.toString().split('').reduce((a,d)=>a+Number(d),0);"
    },
    {
      "path": "src/lib/numerology/calculators.ts",
      "description": "Pythagorean calculators (Life Path / Expression / Soul Urge / Daily)",
      "contents": "import { onlyLetters, letterValue, reduceNumber } from './normalize';\nexport function lifePath(dateISO:string){ const digits = dateISO.replace(/[^0-9]/g,''); const total = digits.split('').reduce((a,d)=>a+Number(d),0); const reduced = reduceNumber(total); return { number: reduced, breakdown:[digits]}; }\nexport function expression(name:string){ const clean=onlyLetters(name); const total = [...clean].reduce((a,c)=>a+letterValue(c),0); return { number: reduceNumber(total), breakdown:[clean]}; }\nexport function soulUrge(name:string){ const clean=onlyLetters(name); const vowels = [...clean].filter(c=> 'AEIOUY'.includes(c)); const total = vowels.reduce((a,c)=>a+letterValue(c),0); return { number: reduceNumber(total), breakdown:[vowels.join('')]}; }\nexport function dailyNumber(date:Date){ const digits = `${date.getFullYear()}${date.getMonth()+1}${date.getDate()}`.split('').map(Number); const total = digits.reduce((a,b)=>a+b,0); return { number: reduceNumber(total), breakdown:[digits.join('')]}; }"
    },
    {
      "path": "src/features/numerology/components/NumerologyForm.tsx",
      "description": "Client component with RHF + Zod for inputs",
      "contents": "'use client';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useRouter } from 'next/navigation';\nconst schema = z.object({ name: z.string().min(2), birth: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/,'YYYY-MM-DD') });\nexport type NumerologyFields = z.infer<typeof schema>;\nexport default function NumerologyForm(){\n const r = useRouter();\n const { register, handleSubmit, formState:{errors} } = useForm({ resolver: zodResolver(schema)});\n const onSubmit = (v:NumerologyFields)=>{ r.push(`./numeroloji/life-path?name=${encodeURIComponent(v.name)}&birth=${v.birth}`); };\n return (<form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n   <div>\n     <label className=\"block text-sm\">İsim / Name</label>\n     <input {...register('name')} className=\"w-full rounded-md bg-white/5 p-3 outline-none ring-1 ring-white/10 focus:ring-2\"/>\n     {errors.name && <p className=\"text-sm text-red-400 mt-1\">{errors.name.message}</p>}\n   </div>\n   <div>\n     <label className=\"block text-sm\">Doğum Tarihi (YYYY-MM-DD)</label>\n     <input {...register('birth')} placeholder=\"1992-07-21\" className=\"w-full rounded-md bg-white/5 p-3 outline-none ring-1 ring-white/10 focus:ring-2\"/>\n     {errors.birth && <p className=\"text-sm text-red-400 mt-1\">{errors.birth.message}</p>}\n   </div>\n   <button type=\"submit\" className=\"w-full rounded-2xl px-4 py-3 bg-amber-500/90 hover:bg-amber-500 font-medium\">Hesapla</button>\n </form>); }"
    },
    {
      "path": "src/features/numerology/components/ResultCard.tsx",
      "description": "RSC-friendly presentational component for results",
      "contents": "export default function ResultCard({title, number, breakdown}:{title:string; number:number; breakdown:string[]}){\n return (\n  <div className=\"rounded-2xl p-5 bg-white/5 ring-1 ring-white/10\">\n    <div className=\"text-sm opacity-80\">{title}</div>\n    <div className=\"text-4xl font-bold my-2\">{number}</div>\n    {breakdown?.length>0 && <div className=\"text-xs opacity-70\">{breakdown.join(' • ')}</div>}\n  </div>\n ); }"
    },
    {
      "path": "src/app/[locale]/(marketing)/numeroloji/page.tsx",
      "description": "Landing (RSC) with quick tools and form",
      "contents": "import NumerologyForm from '@/features/numerology/components/NumerologyForm';\nimport { getTranslator } from 'next-intl/server';\nexport default async function Page({params:{locale}}:{params:{locale:string}}){\n const t = await getTranslator(locale,'numerology');\n return (\n  <main className=\"mx-auto max-w-md px-4 py-8 space-y-6\">\n    <h1 className=\"text-2xl font-semibold\">{t('title')}</h1>\n    <p className=\"opacity-80\">{t('subtitle')}</p>\n    <section className=\"space-y-4\">\n      <h2 className=\"text-lg font-medium\">{t('quick.start')}</h2>\n      <NumerologyForm />\n    </section>\n  </main>\n ); }"
    },
    {
      "path": "src/app/[locale]/(marketing)/numeroloji/[type]/page.tsx",
      "description": "Result page (RSC) reading query params server-side safe",
      "contents": "import { getTranslator } from 'next-intl/server';\nimport ResultCard from '@/features/numerology/components/ResultCard';\nimport { lifePath, expression, soulUrge } from '@/lib/numerology/calculators';\nimport { headers } from 'next/headers';\nexport default async function Page({params:{locale,type}}:{params:{locale:string; type:string}}){\n const t = await getTranslator(locale,'numerology');\n const h = headers();\n const url = new URL(h.get('x-url') ?? 'http://localhost');\n const name = url.searchParams.get('name') ?? '';\n const birth = url.searchParams.get('birth') ?? '';\n const map:any = { 'life-path': lifePath, 'expression': expression, 'soul-urge': soulUrge };\n const fn = map[type] ?? lifePath;\n const res = type==='life-path' ? fn(birth) : fn(name);\n return (\n  <main className=\"mx-auto max-w-md px-4 py-8 space-y-6\">\n    <h1 className=\"text-2xl font-semibold\">{t('result.title',{type})}</h1>\n    <ResultCard title={t('result.cardTitle',{type})} number={res.number} breakdown={res.breakdown} />\n  </main>\n ); }"
    },
    {
      "path": "messages/tr.json",
      "description": "Append keys (do not overwrite existing)",
      "contentsAppend": {
        "numerology": {
          "title": "Numeroloji",
          "subtitle": "İsmin ve doğum tarihin ile sayının rehberliğini keşfet.",
          "quick": { "start": "Hızlı Başlangıç" },
          "result": {
            "title": "{type} sonucu",
            "cardTitle": "{type} numaran"
          }
        }
      }
    },
    {
      "path": "messages/en.json",
      "description": "Append keys",
      "contentsAppend": {
        "numerology": {
          "title": "Numerology",
          "subtitle": "Discover the guidance of your number using your name and birth date.",
          "quick": { "start": "Quick Start" },
          "result": {
            "title": "{type} result",
            "cardTitle": "Your {type} number"
          }
        }
      }
    },
    {
      "path": "messages/sr.json",
      "description": "Append keys (Latin)",
      "contentsAppend": {
        "numerology": {
          "title": "Numerologija",
          "subtitle": "Otkrij vođstvo svog broja uz ime i datum rođenja.",
          "quick": { "start": "Brzi početak" },
          "result": {
            "title": "{type} rezultat",
            "cardTitle": "Tvoj {type} broj"
          }
        }
      }
    },
    {
      "path": "tests/numerology/calculators.test.ts",
      "description": "Vitest unit tests for calculators",
      "contents": "import { describe, it, expect } from 'vitest';\nimport { lifePath, expression, soulUrge } from '@/lib/numerology/calculators';\n\ndescribe('numerology calculators', ()=>{\n  it('lifePath reduces properly', ()=>{\n    const r = lifePath('1992-07-21');\n    expect(r.number).toBeGreaterThan(0);\n  });\n  it('expression handles letters', ()=>{\n    const r = expression('Test Name');\n    expect(r.number).toBeGreaterThan(0);\n  });\n  it('soulUrge uses vowels', ()=>{\n    const r = soulUrge('Alex');\n    expect(r.number).toBeGreaterThan(0);\n  });\n});"
    },
    {
      "path": "tests/numerology/e2e.numerology.spec.ts",
      "description": "Playwright e2e smoke",
      "contents": "import { test, expect } from '@playwright/test';\n\ntest('numerology landing loads and validates', async ({ page })=>{\n  await page.goto('/tr/numeroloji');\n  await page.getByRole('button', {name: 'Hesapla'}).click();\n  await expect(page.locator('text:has(\"YYYY-MM-DD\")')).toBeVisible();\n});"
    }
  ],
  "steps": [
    "Create lib helpers (types, normalize, calculators) with Pythagorean logic + master numbers (11,22,33).",
    "Create client form with RHF + Zod; onSubmit navigates to /numeroloji/life-path?name=..&birth=..",
    "Create RSC landing + result pages; read query on server (headers x-url workaround) and hydrate.",
    "Add i18n keys to tr/en/sr without overwriting existing messages.",
    "Style with Tailwind (mobile-first); ensure AA contrast and focus states.",
    "Add unit tests (Vitest) and a simple e2e smoke test (Playwright).",
    "Run pnpm lint, typecheck, build."
  ],
  "commands": [
    "pnpm add zod @hookform/resolvers react-hook-form",
    "pnpm test",
    "pnpm build"
  ],
  "notes": [
    "Keep client components minimal (forms only).",
    "No external API calls; all math is local, deterministic, and testable.",
    "If you already have shared Card/Section components, reuse instead of creating new ones.",
    "Ensure metadata (title/description) via existing SEO utilities if present."
  ],
  "doneDefinition": [
    "Pages render with localized UI and pass Lighthouse/a11y checks.",
    "Form validations show localized errors.",
    "Direct links with query params reproduce results.",
    "All tests pass; no type or lint errors."
  ]
}