/*
info:
Bağlantılı dosyalar:
- ./lib/i18n/config.ts: i18n yapılandırması için (gerekli)
- ./lib/i18n/paths.ts: Path helper fonksiyonları için (gerekli)

Dosyanın amacı:
- Locale segment routing middleware
- Varsayılan dil yönlendirmesi (/ -> /tr)
- Locale validation ve routing

Supabase değişkenleri ve tabloları:
- Yok (middleware)

Geliştirme önerileri:
- API route'ları için locale bypass
- Static asset'ler için locale bypass

Tespit edilen hatalar:
- Yok

Kullanım durumu:
- Aktif kullanımda
*/

import { NextRequest, NextResponse } from 'next/server';

export function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname;
  
  // API route'ları ve static dosyaları bypass et
  if (
    pathname.startsWith('/api') ||
    pathname.startsWith('/_next') ||
    pathname.startsWith('/_vercel') ||
    pathname.includes('.')
  ) {
    return NextResponse.next();
  }

  // Locale kontrolü
  const pathnameIsMissingLocale = ['tr', 'en', 'sr'].every(
    (locale) => !pathname.startsWith(`/${locale}/`) && pathname !== `/${locale}`
  );

  // Root path'i varsayılan dile yönlendir
  if (pathname === '/') {
    return NextResponse.redirect(new URL('/tr', request.url));
  }

  // Locale yoksa varsayılan dile yönlendir
  if (pathnameIsMissingLocale) {
    return NextResponse.redirect(new URL(`/tr${pathname}`, request.url));
  }

  return NextResponse.next();
}

export const config = {
  matcher: [
    '/((?!api|_next|_vercel|.*\\..*).*)',
  ],
};
