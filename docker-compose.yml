# ============================================================================
# TaraTarot Docker Compose Configuration
# Multi-environment setup for development, testing, and production
# ============================================================================

version: '3.8'

services:
  # ==========================================================================
  # Development Environment
  # ==========================================================================
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: deps
    container_name: taratarot-dev
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
    env_file:
      - .env.local
    command: npm run dev
    restart: unless-stopped
    networks:
      - taratarot-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================================================
  # Production Environment
  # ==========================================================================
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: taratarot-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
      - HOSTNAME=0.0.0.0
    env_file:
      - .env.production
    restart: always
    networks:
      - taratarot-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ==========================================================================
  # Testing Environment
  # ==========================================================================
  app-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: taratarot-test
    volumes:
      - .:/app
      - /app/node_modules
      - ./coverage:/app/coverage
    environment:
      - NODE_ENV=test
      - CI=true
    env_file:
      - .env.test
    command: npm run test:ci
    networks:
      - taratarot-network

  # ==========================================================================
  # Nginx Reverse Proxy (Optional for Production)
  # ==========================================================================
  nginx:
    image: nginx:alpine
    container_name: taratarot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app-prod
    restart: always
    networks:
      - taratarot-network
    profiles:
      - production

networks:
  taratarot-network:
    driver: bridge
    name: taratarot-network

# ==========================================================================
# Usage Instructions
# ==========================================================================
#
# Development:
#   docker-compose up app-dev
#
# Production:
#   docker-compose up app-prod
#   # With nginx:
#   docker-compose --profile production up
#
# Testing:
#   docker-compose run app-test
#
# Build only:
#   docker-compose build
#
# Stop all:
#   docker-compose down
#
# Clean up:
#   docker-compose down -v --rmi all
# ==========================================================================
